<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue3 随手记</title>
    <link href="/2022/12/19/vue/vue3-remark/"/>
    <url>/2022/12/19/vue/vue3-remark/</url>
    
    <content type="html"><![CDATA[<h2 id="props-设置默认值-setup-defineProps"><a href="#props-设置默认值-setup-defineProps" class="headerlink" title="props 设置默认值 - setup defineProps"></a><code>props</code> 设置默认值 - <code>setup</code> <code>defineProps</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span> setup&gt;<br>  <br>  <span class="hljs-comment">// ts 写法</span><br>  <span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;&#123;<br>    <span class="hljs-attr">name</span>: string;<br>    age?: number; <span class="hljs-comment">// 非必填</span><br>  &#125;&gt;(), &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-comment">// 设置默认值</span><br>  &#125;);<br><br>  <span class="hljs-comment">// 非 ts 写法</span><br>  <span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123;<br>    <span class="hljs-attr">name</span>: &#123;<br>      <span class="hljs-attr">type</span>: string,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">age</span>: &#123;<br>      <span class="hljs-attr">type</span>: number,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">18</span><br>    &#125;<br>  &#125;)<br>  <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue3</tag>
      
      <tag>setupt</tag>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex 布局</title>
    <link href="/2022/12/15/css/flex/"/>
    <url>/2022/12/15/css/flex/</url>
    
    <content type="html"><![CDATA[<h2 id="子元素均分宽度"><a href="#子元素均分宽度" class="headerlink" title="子元素均分宽度"></a>子元素均分宽度</h2><p>子元素均分父元素宽度，且不受子元素的内容影响。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-class">.child</span> &#123;<br>  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 或者 */</span><br><span class="hljs-selector-class">.child</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app 解除微信样式隔离</title>
    <link href="/2022/12/15/uniapp/style/"/>
    <url>/2022/12/15/uniapp/style/</url>
    
    <content type="html"><![CDATA[<p>uniapp 给自定义组件或 uni-ui 等ui组件加class样式或修改样式在微信小程序不生效</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>微信小程序默认的组件隔离策略导致的。自定义组件还是 <code>uni-ui</code> 的组件都不行。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在要修改样式的组件内，<code>data</code> 同级的地方加个 <strong>微信小程序</strong> 的配置即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">options</span>: &#123;<br>      <span class="hljs-attr">styleIsolation</span>: <span class="hljs-string">&#x27;shared&#x27;</span>, <span class="hljs-comment">// 解除样式隔离</span><br>    &#125;,<br>    data () &#123;&#125;,<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uniapp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取文字首字母</title>
    <link href="/2022/11/16/js/first-letter/"/>
    <url>/2022/11/16/js/first-letter/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> strChineseFirstPY = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">// 此处收录了375个多音字,数据来自于http://www.51window.net/page/pinyin</span><br><span class="hljs-keyword">const</span> oMultiDiff = &#123; <span class="hljs-string">&quot;19969&quot;</span>: <span class="hljs-string">&quot;DZ&quot;</span>, <span class="hljs-string">&quot;19975&quot;</span>: <span class="hljs-string">&quot;WM&quot;</span>, <span class="hljs-string">&quot;19988&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;20048&quot;</span>: <span class="hljs-string">&quot;YL&quot;</span>, <span class="hljs-string">&quot;20056&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;20060&quot;</span>: <span class="hljs-string">&quot;NM&quot;</span>, <span class="hljs-string">&quot;20094&quot;</span>: <span class="hljs-string">&quot;QG&quot;</span>, <span class="hljs-string">&quot;20127&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;20167&quot;</span>: <span class="hljs-string">&quot;QC&quot;</span>, <span class="hljs-string">&quot;20193&quot;</span>: <span class="hljs-string">&quot;YG&quot;</span>, <span class="hljs-string">&quot;20250&quot;</span>: <span class="hljs-string">&quot;KH&quot;</span>, <span class="hljs-string">&quot;20256&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;20282&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;20285&quot;</span>: <span class="hljs-string">&quot;QJG&quot;</span>, <span class="hljs-string">&quot;20291&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;20314&quot;</span>: <span class="hljs-string">&quot;YD&quot;</span>, <span class="hljs-string">&quot;20340&quot;</span>: <span class="hljs-string">&quot;NE&quot;</span>, <span class="hljs-string">&quot;20375&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;20389&quot;</span>: <span class="hljs-string">&quot;YJ&quot;</span>, <span class="hljs-string">&quot;20391&quot;</span>: <span class="hljs-string">&quot;CZ&quot;</span>, <span class="hljs-string">&quot;20415&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;20446&quot;</span>: <span class="hljs-string">&quot;YS&quot;</span>, <span class="hljs-string">&quot;20447&quot;</span>: <span class="hljs-string">&quot;SQ&quot;</span>, <span class="hljs-string">&quot;20504&quot;</span>: <span class="hljs-string">&quot;TC&quot;</span>, <span class="hljs-string">&quot;20608&quot;</span>: <span class="hljs-string">&quot;KG&quot;</span>, <span class="hljs-string">&quot;20854&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;20857&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;20911&quot;</span>: <span class="hljs-string">&quot;PF&quot;</span>, <span class="hljs-string">&quot;20985&quot;</span>: <span class="hljs-string">&quot;AW&quot;</span>, <span class="hljs-string">&quot;21032&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;21048&quot;</span>: <span class="hljs-string">&quot;XQ&quot;</span>, <span class="hljs-string">&quot;21049&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;21089&quot;</span>: <span class="hljs-string">&quot;YS&quot;</span>, <span class="hljs-string">&quot;21119&quot;</span>: <span class="hljs-string">&quot;JC&quot;</span>, <span class="hljs-string">&quot;21242&quot;</span>: <span class="hljs-string">&quot;SB&quot;</span>, <span class="hljs-string">&quot;21273&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;21305&quot;</span>: <span class="hljs-string">&quot;YP&quot;</span>, <span class="hljs-string">&quot;21306&quot;</span>: <span class="hljs-string">&quot;QO&quot;</span>, <span class="hljs-string">&quot;21330&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;21333&quot;</span>: <span class="hljs-string">&quot;SDC&quot;</span>, <span class="hljs-string">&quot;21345&quot;</span>: <span class="hljs-string">&quot;QK&quot;</span>, <span class="hljs-string">&quot;21378&quot;</span>: <span class="hljs-string">&quot;CA&quot;</span>, <span class="hljs-string">&quot;21397&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;21414&quot;</span>: <span class="hljs-string">&quot;XS&quot;</span>, <span class="hljs-string">&quot;21442&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;21477&quot;</span>: <span class="hljs-string">&quot;JG&quot;</span>, <span class="hljs-string">&quot;21480&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;21484&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;21494&quot;</span>: <span class="hljs-string">&quot;YX&quot;</span>, <span class="hljs-string">&quot;21505&quot;</span>: <span class="hljs-string">&quot;YX&quot;</span>, <span class="hljs-string">&quot;21512&quot;</span>: <span class="hljs-string">&quot;HG&quot;</span>, <span class="hljs-string">&quot;21523&quot;</span>: <span class="hljs-string">&quot;XH&quot;</span>, <span class="hljs-string">&quot;21537&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;21542&quot;</span>: <span class="hljs-string">&quot;PF&quot;</span>, <span class="hljs-string">&quot;21549&quot;</span>: <span class="hljs-string">&quot;KH&quot;</span>, <span class="hljs-string">&quot;21571&quot;</span>: <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;21574&quot;</span>: <span class="hljs-string">&quot;DA&quot;</span>, <span class="hljs-string">&quot;21588&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;21589&quot;</span>: <span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;21618&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;21621&quot;</span>: <span class="hljs-string">&quot;KHA&quot;</span>, <span class="hljs-string">&quot;21632&quot;</span>: <span class="hljs-string">&quot;ZJ&quot;</span>, <span class="hljs-string">&quot;21654&quot;</span>: <span class="hljs-string">&quot;KG&quot;</span>, <span class="hljs-string">&quot;21679&quot;</span>: <span class="hljs-string">&quot;LKG&quot;</span>, <span class="hljs-string">&quot;21683&quot;</span>: <span class="hljs-string">&quot;KH&quot;</span>, <span class="hljs-string">&quot;21710&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;21719&quot;</span>: <span class="hljs-string">&quot;YH&quot;</span>, <span class="hljs-string">&quot;21734&quot;</span>: <span class="hljs-string">&quot;WOE&quot;</span>, <span class="hljs-string">&quot;21769&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;21780&quot;</span>: <span class="hljs-string">&quot;WN&quot;</span>, <span class="hljs-string">&quot;21804&quot;</span>: <span class="hljs-string">&quot;XH&quot;</span>, <span class="hljs-string">&quot;21834&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;21899&quot;</span>: <span class="hljs-string">&quot;ZD&quot;</span>, <span class="hljs-string">&quot;21903&quot;</span>: <span class="hljs-string">&quot;RN&quot;</span>, <span class="hljs-string">&quot;21908&quot;</span>: <span class="hljs-string">&quot;WO&quot;</span>, <span class="hljs-string">&quot;21939&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;21956&quot;</span>: <span class="hljs-string">&quot;SA&quot;</span>, <span class="hljs-string">&quot;21964&quot;</span>: <span class="hljs-string">&quot;YA&quot;</span>, <span class="hljs-string">&quot;21970&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;22003&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;22031&quot;</span>: <span class="hljs-string">&quot;JG&quot;</span>, <span class="hljs-string">&quot;22040&quot;</span>: <span class="hljs-string">&quot;XS&quot;</span>, <span class="hljs-string">&quot;22060&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;22066&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;22079&quot;</span>: <span class="hljs-string">&quot;MH&quot;</span>, <span class="hljs-string">&quot;22129&quot;</span>: <span class="hljs-string">&quot;XJ&quot;</span>, <span class="hljs-string">&quot;22179&quot;</span>: <span class="hljs-string">&quot;XA&quot;</span>, <span class="hljs-string">&quot;22237&quot;</span>: <span class="hljs-string">&quot;NJ&quot;</span>, <span class="hljs-string">&quot;22244&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;22280&quot;</span>: <span class="hljs-string">&quot;JQ&quot;</span>, <span class="hljs-string">&quot;22300&quot;</span>: <span class="hljs-string">&quot;YH&quot;</span>, <span class="hljs-string">&quot;22313&quot;</span>: <span class="hljs-string">&quot;XW&quot;</span>, <span class="hljs-string">&quot;22331&quot;</span>: <span class="hljs-string">&quot;YQ&quot;</span>, <span class="hljs-string">&quot;22343&quot;</span>: <span class="hljs-string">&quot;YJ&quot;</span>, <span class="hljs-string">&quot;22351&quot;</span>: <span class="hljs-string">&quot;PH&quot;</span>, <span class="hljs-string">&quot;22395&quot;</span>: <span class="hljs-string">&quot;DC&quot;</span>, <span class="hljs-string">&quot;22412&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;22484&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;22500&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;22534&quot;</span>: <span class="hljs-string">&quot;ZD&quot;</span>, <span class="hljs-string">&quot;22549&quot;</span>: <span class="hljs-string">&quot;DH&quot;</span>, <span class="hljs-string">&quot;22561&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;22612&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;22771&quot;</span>: <span class="hljs-string">&quot;KQ&quot;</span>, <span class="hljs-string">&quot;22831&quot;</span>: <span class="hljs-string">&quot;HB&quot;</span>, <span class="hljs-string">&quot;22841&quot;</span>: <span class="hljs-string">&quot;JG&quot;</span>, <span class="hljs-string">&quot;22855&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;22865&quot;</span>: <span class="hljs-string">&quot;XQ&quot;</span>, <span class="hljs-string">&quot;23013&quot;</span>: <span class="hljs-string">&quot;ML&quot;</span>, <span class="hljs-string">&quot;23081&quot;</span>: <span class="hljs-string">&quot;WM&quot;</span>, <span class="hljs-string">&quot;23487&quot;</span>: <span class="hljs-string">&quot;SX&quot;</span>, <span class="hljs-string">&quot;23558&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;23561&quot;</span>: <span class="hljs-string">&quot;YW&quot;</span>, <span class="hljs-string">&quot;23586&quot;</span>: <span class="hljs-string">&quot;YW&quot;</span>, <span class="hljs-string">&quot;23614&quot;</span>: <span class="hljs-string">&quot;YW&quot;</span>, <span class="hljs-string">&quot;23615&quot;</span>: <span class="hljs-string">&quot;SN&quot;</span>, <span class="hljs-string">&quot;23631&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;23646&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;23663&quot;</span>: <span class="hljs-string">&quot;ZT&quot;</span>, <span class="hljs-string">&quot;23673&quot;</span>: <span class="hljs-string">&quot;YG&quot;</span>, <span class="hljs-string">&quot;23762&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;23769&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;23780&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;23884&quot;</span>: <span class="hljs-string">&quot;QK&quot;</span>, <span class="hljs-string">&quot;24055&quot;</span>: <span class="hljs-string">&quot;XH&quot;</span>, <span class="hljs-string">&quot;24113&quot;</span>: <span class="hljs-string">&quot;DC&quot;</span>, <span class="hljs-string">&quot;24162&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;24191&quot;</span>: <span class="hljs-string">&quot;GA&quot;</span>, <span class="hljs-string">&quot;24273&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;24324&quot;</span>: <span class="hljs-string">&quot;NL&quot;</span>, <span class="hljs-string">&quot;24377&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;24378&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;24439&quot;</span>: <span class="hljs-string">&quot;PF&quot;</span>, <span class="hljs-string">&quot;24554&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;24683&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;24694&quot;</span>: <span class="hljs-string">&quot;WE&quot;</span>, <span class="hljs-string">&quot;24733&quot;</span>: <span class="hljs-string">&quot;LK&quot;</span>, <span class="hljs-string">&quot;24925&quot;</span>: <span class="hljs-string">&quot;TN&quot;</span>, <span class="hljs-string">&quot;25094&quot;</span>: <span class="hljs-string">&quot;ZG&quot;</span>, <span class="hljs-string">&quot;25100&quot;</span>: <span class="hljs-string">&quot;XQ&quot;</span>, <span class="hljs-string">&quot;25103&quot;</span>: <span class="hljs-string">&quot;XH&quot;</span>, <span class="hljs-string">&quot;25153&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;25170&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;25179&quot;</span>: <span class="hljs-string">&quot;KG&quot;</span>, <span class="hljs-string">&quot;25203&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;25240&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;25282&quot;</span>: <span class="hljs-string">&quot;FB&quot;</span>, <span class="hljs-string">&quot;25303&quot;</span>: <span class="hljs-string">&quot;NA&quot;</span>, <span class="hljs-string">&quot;25324&quot;</span>: <span class="hljs-string">&quot;KG&quot;</span>, <span class="hljs-string">&quot;25341&quot;</span>: <span class="hljs-string">&quot;ZY&quot;</span>, <span class="hljs-string">&quot;25373&quot;</span>: <span class="hljs-string">&quot;WZ&quot;</span>, <span class="hljs-string">&quot;25375&quot;</span>: <span class="hljs-string">&quot;XJ&quot;</span>, <span class="hljs-string">&quot;25384&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;25457&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;25528&quot;</span>: <span class="hljs-string">&quot;SD&quot;</span>, <span class="hljs-string">&quot;25530&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;25552&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;25774&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;25874&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;26044&quot;</span>: <span class="hljs-string">&quot;YW&quot;</span>, <span class="hljs-string">&quot;26080&quot;</span>: <span class="hljs-string">&quot;WM&quot;</span>, <span class="hljs-string">&quot;26292&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;26333&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;26355&quot;</span>: <span class="hljs-string">&quot;ZY&quot;</span>, <span class="hljs-string">&quot;26366&quot;</span>: <span class="hljs-string">&quot;CZ&quot;</span>, <span class="hljs-string">&quot;26397&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;26399&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;26415&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;26451&quot;</span>: <span class="hljs-string">&quot;SB&quot;</span>, <span class="hljs-string">&quot;26526&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;26552&quot;</span>: <span class="hljs-string">&quot;JG&quot;</span>, <span class="hljs-string">&quot;26561&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;26588&quot;</span>: <span class="hljs-string">&quot;JG&quot;</span>, <span class="hljs-string">&quot;26597&quot;</span>: <span class="hljs-string">&quot;CZ&quot;</span>, <span class="hljs-string">&quot;26629&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;26638&quot;</span>: <span class="hljs-string">&quot;YL&quot;</span>, <span class="hljs-string">&quot;26646&quot;</span>: <span class="hljs-string">&quot;XQ&quot;</span>, <span class="hljs-string">&quot;26653&quot;</span>: <span class="hljs-string">&quot;KG&quot;</span>, <span class="hljs-string">&quot;26657&quot;</span>: <span class="hljs-string">&quot;XJ&quot;</span>, <span class="hljs-string">&quot;26727&quot;</span>: <span class="hljs-string">&quot;HG&quot;</span>, <span class="hljs-string">&quot;26894&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;26937&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;26946&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;26999&quot;</span>: <span class="hljs-string">&quot;KJ&quot;</span>, <span class="hljs-string">&quot;27099&quot;</span>: <span class="hljs-string">&quot;KJ&quot;</span>, <span class="hljs-string">&quot;27449&quot;</span>: <span class="hljs-string">&quot;YQ&quot;</span>, <span class="hljs-string">&quot;27481&quot;</span>: <span class="hljs-string">&quot;XS&quot;</span>, <span class="hljs-string">&quot;27542&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;27663&quot;</span>: <span class="hljs-string">&quot;ZS&quot;</span>, <span class="hljs-string">&quot;27748&quot;</span>: <span class="hljs-string">&quot;TS&quot;</span>, <span class="hljs-string">&quot;27784&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;27788&quot;</span>: <span class="hljs-string">&quot;ZD&quot;</span>, <span class="hljs-string">&quot;27795&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;27812&quot;</span>: <span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;27850&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;27852&quot;</span>: <span class="hljs-string">&quot;MB&quot;</span>, <span class="hljs-string">&quot;27895&quot;</span>: <span class="hljs-string">&quot;SL&quot;</span>, <span class="hljs-string">&quot;27898&quot;</span>: <span class="hljs-string">&quot;PL&quot;</span>, <span class="hljs-string">&quot;27973&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;27981&quot;</span>: <span class="hljs-string">&quot;KH&quot;</span>, <span class="hljs-string">&quot;27986&quot;</span>: <span class="hljs-string">&quot;HX&quot;</span>, <span class="hljs-string">&quot;27994&quot;</span>: <span class="hljs-string">&quot;XJ&quot;</span>, <span class="hljs-string">&quot;28044&quot;</span>: <span class="hljs-string">&quot;YC&quot;</span>, <span class="hljs-string">&quot;28065&quot;</span>: <span class="hljs-string">&quot;WG&quot;</span>, <span class="hljs-string">&quot;28177&quot;</span>: <span class="hljs-string">&quot;SM&quot;</span>, <span class="hljs-string">&quot;28267&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;28291&quot;</span>: <span class="hljs-string">&quot;KH&quot;</span>, <span class="hljs-string">&quot;28337&quot;</span>: <span class="hljs-string">&quot;ZQ&quot;</span>, <span class="hljs-string">&quot;28463&quot;</span>: <span class="hljs-string">&quot;TL&quot;</span>, <span class="hljs-string">&quot;28548&quot;</span>: <span class="hljs-string">&quot;DC&quot;</span>, <span class="hljs-string">&quot;28601&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;28689&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;28805&quot;</span>: <span class="hljs-string">&quot;JG&quot;</span>, <span class="hljs-string">&quot;28820&quot;</span>: <span class="hljs-string">&quot;QG&quot;</span>, <span class="hljs-string">&quot;28846&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;28952&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;28975&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;29100&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;29325&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;29575&quot;</span>: <span class="hljs-string">&quot;SL&quot;</span>, <span class="hljs-string">&quot;29602&quot;</span>: <span class="hljs-string">&quot;FB&quot;</span>, <span class="hljs-string">&quot;30010&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;30044&quot;</span>: <span class="hljs-string">&quot;CX&quot;</span>, <span class="hljs-string">&quot;30058&quot;</span>: <span class="hljs-string">&quot;PF&quot;</span>, <span class="hljs-string">&quot;30091&quot;</span>: <span class="hljs-string">&quot;YSP&quot;</span>, <span class="hljs-string">&quot;30111&quot;</span>: <span class="hljs-string">&quot;YN&quot;</span>, <span class="hljs-string">&quot;30229&quot;</span>: <span class="hljs-string">&quot;XJ&quot;</span>, <span class="hljs-string">&quot;30427&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;30465&quot;</span>: <span class="hljs-string">&quot;SX&quot;</span>, <span class="hljs-string">&quot;30631&quot;</span>: <span class="hljs-string">&quot;YQ&quot;</span>, <span class="hljs-string">&quot;30655&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;30684&quot;</span>: <span class="hljs-string">&quot;QJG&quot;</span>, <span class="hljs-string">&quot;30707&quot;</span>: <span class="hljs-string">&quot;SD&quot;</span>, <span class="hljs-string">&quot;30729&quot;</span>: <span class="hljs-string">&quot;XH&quot;</span>, <span class="hljs-string">&quot;30796&quot;</span>: <span class="hljs-string">&quot;LG&quot;</span>, <span class="hljs-string">&quot;30917&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;31074&quot;</span>: <span class="hljs-string">&quot;NM&quot;</span>, <span class="hljs-string">&quot;31085&quot;</span>: <span class="hljs-string">&quot;JZ&quot;</span>, <span class="hljs-string">&quot;31109&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;31181&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;31192&quot;</span>: <span class="hljs-string">&quot;MLB&quot;</span>, <span class="hljs-string">&quot;31293&quot;</span>: <span class="hljs-string">&quot;JQ&quot;</span>, <span class="hljs-string">&quot;31400&quot;</span>: <span class="hljs-string">&quot;YX&quot;</span>, <span class="hljs-string">&quot;31584&quot;</span>: <span class="hljs-string">&quot;YJ&quot;</span>, <span class="hljs-string">&quot;31896&quot;</span>: <span class="hljs-string">&quot;ZN&quot;</span>, <span class="hljs-string">&quot;31909&quot;</span>: <span class="hljs-string">&quot;ZY&quot;</span>, <span class="hljs-string">&quot;31995&quot;</span>: <span class="hljs-string">&quot;XJ&quot;</span>, <span class="hljs-string">&quot;32321&quot;</span>: <span class="hljs-string">&quot;PF&quot;</span>, <span class="hljs-string">&quot;32327&quot;</span>: <span class="hljs-string">&quot;ZY&quot;</span>, <span class="hljs-string">&quot;32418&quot;</span>: <span class="hljs-string">&quot;HG&quot;</span>, <span class="hljs-string">&quot;32420&quot;</span>: <span class="hljs-string">&quot;XQ&quot;</span>, <span class="hljs-string">&quot;32421&quot;</span>: <span class="hljs-string">&quot;HG&quot;</span>, <span class="hljs-string">&quot;32438&quot;</span>: <span class="hljs-string">&quot;LG&quot;</span>, <span class="hljs-string">&quot;32473&quot;</span>: <span class="hljs-string">&quot;GJ&quot;</span>, <span class="hljs-string">&quot;32488&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;32521&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;32527&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;32562&quot;</span>: <span class="hljs-string">&quot;ZSQ&quot;</span>, <span class="hljs-string">&quot;32564&quot;</span>: <span class="hljs-string">&quot;JZ&quot;</span>, <span class="hljs-string">&quot;32735&quot;</span>: <span class="hljs-string">&quot;ZD&quot;</span>, <span class="hljs-string">&quot;32793&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;33071&quot;</span>: <span class="hljs-string">&quot;PF&quot;</span>, <span class="hljs-string">&quot;33098&quot;</span>: <span class="hljs-string">&quot;XL&quot;</span>, <span class="hljs-string">&quot;33100&quot;</span>: <span class="hljs-string">&quot;YA&quot;</span>, <span class="hljs-string">&quot;33152&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;33261&quot;</span>: <span class="hljs-string">&quot;CX&quot;</span>, <span class="hljs-string">&quot;33324&quot;</span>: <span class="hljs-string">&quot;BP&quot;</span>, <span class="hljs-string">&quot;33333&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;33406&quot;</span>: <span class="hljs-string">&quot;YA&quot;</span>, <span class="hljs-string">&quot;33426&quot;</span>: <span class="hljs-string">&quot;WM&quot;</span>, <span class="hljs-string">&quot;33432&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;33445&quot;</span>: <span class="hljs-string">&quot;JG&quot;</span>, <span class="hljs-string">&quot;33486&quot;</span>: <span class="hljs-string">&quot;ZN&quot;</span>, <span class="hljs-string">&quot;33493&quot;</span>: <span class="hljs-string">&quot;TS&quot;</span>, <span class="hljs-string">&quot;33507&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;33540&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;33544&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;33564&quot;</span>: <span class="hljs-string">&quot;XQ&quot;</span>, <span class="hljs-string">&quot;33617&quot;</span>: <span class="hljs-string">&quot;YT&quot;</span>, <span class="hljs-string">&quot;33632&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;33636&quot;</span>: <span class="hljs-string">&quot;XH&quot;</span>, <span class="hljs-string">&quot;33637&quot;</span>: <span class="hljs-string">&quot;YX&quot;</span>, <span class="hljs-string">&quot;33694&quot;</span>: <span class="hljs-string">&quot;WG&quot;</span>, <span class="hljs-string">&quot;33705&quot;</span>: <span class="hljs-string">&quot;PF&quot;</span>, <span class="hljs-string">&quot;33728&quot;</span>: <span class="hljs-string">&quot;YW&quot;</span>, <span class="hljs-string">&quot;33882&quot;</span>: <span class="hljs-string">&quot;SR&quot;</span>, <span class="hljs-string">&quot;34067&quot;</span>: <span class="hljs-string">&quot;WM&quot;</span>, <span class="hljs-string">&quot;34074&quot;</span>: <span class="hljs-string">&quot;YW&quot;</span>, <span class="hljs-string">&quot;34121&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;34255&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;34259&quot;</span>: <span class="hljs-string">&quot;XL&quot;</span>, <span class="hljs-string">&quot;34425&quot;</span>: <span class="hljs-string">&quot;JH&quot;</span>, <span class="hljs-string">&quot;34430&quot;</span>: <span class="hljs-string">&quot;XH&quot;</span>, <span class="hljs-string">&quot;34485&quot;</span>: <span class="hljs-string">&quot;KH&quot;</span>, <span class="hljs-string">&quot;34503&quot;</span>: <span class="hljs-string">&quot;YS&quot;</span>, <span class="hljs-string">&quot;34532&quot;</span>: <span class="hljs-string">&quot;HG&quot;</span>, <span class="hljs-string">&quot;34552&quot;</span>: <span class="hljs-string">&quot;XS&quot;</span>, <span class="hljs-string">&quot;34558&quot;</span>: <span class="hljs-string">&quot;YE&quot;</span>, <span class="hljs-string">&quot;34593&quot;</span>: <span class="hljs-string">&quot;ZL&quot;</span>, <span class="hljs-string">&quot;34660&quot;</span>: <span class="hljs-string">&quot;YQ&quot;</span>, <span class="hljs-string">&quot;34892&quot;</span>: <span class="hljs-string">&quot;XH&quot;</span>, <span class="hljs-string">&quot;34928&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;34999&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;35048&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;35059&quot;</span>: <span class="hljs-string">&quot;SC&quot;</span>, <span class="hljs-string">&quot;35098&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;35203&quot;</span>: <span class="hljs-string">&quot;TQ&quot;</span>, <span class="hljs-string">&quot;35265&quot;</span>: <span class="hljs-string">&quot;JX&quot;</span>, <span class="hljs-string">&quot;35299&quot;</span>: <span class="hljs-string">&quot;JX&quot;</span>, <span class="hljs-string">&quot;35782&quot;</span>: <span class="hljs-string">&quot;SZ&quot;</span>, <span class="hljs-string">&quot;35828&quot;</span>: <span class="hljs-string">&quot;YS&quot;</span>, <span class="hljs-string">&quot;35830&quot;</span>: <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;35843&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;35895&quot;</span>: <span class="hljs-string">&quot;YG&quot;</span>, <span class="hljs-string">&quot;35977&quot;</span>: <span class="hljs-string">&quot;MH&quot;</span>, <span class="hljs-string">&quot;36158&quot;</span>: <span class="hljs-string">&quot;JG&quot;</span>, <span class="hljs-string">&quot;36228&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;36426&quot;</span>: <span class="hljs-string">&quot;XQ&quot;</span>, <span class="hljs-string">&quot;36466&quot;</span>: <span class="hljs-string">&quot;DC&quot;</span>, <span class="hljs-string">&quot;36710&quot;</span>: <span class="hljs-string">&quot;JC&quot;</span>, <span class="hljs-string">&quot;36711&quot;</span>: <span class="hljs-string">&quot;ZYG&quot;</span>, <span class="hljs-string">&quot;36767&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;36866&quot;</span>: <span class="hljs-string">&quot;SK&quot;</span>, <span class="hljs-string">&quot;36951&quot;</span>: <span class="hljs-string">&quot;YW&quot;</span>, <span class="hljs-string">&quot;37034&quot;</span>: <span class="hljs-string">&quot;YX&quot;</span>, <span class="hljs-string">&quot;37063&quot;</span>: <span class="hljs-string">&quot;XH&quot;</span>, <span class="hljs-string">&quot;37218&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;37325&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;38063&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;38079&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;38085&quot;</span>: <span class="hljs-string">&quot;QY&quot;</span>, <span class="hljs-string">&quot;38107&quot;</span>: <span class="hljs-string">&quot;DC&quot;</span>, <span class="hljs-string">&quot;38116&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;38123&quot;</span>: <span class="hljs-string">&quot;YD&quot;</span>, <span class="hljs-string">&quot;38224&quot;</span>: <span class="hljs-string">&quot;HG&quot;</span>, <span class="hljs-string">&quot;38241&quot;</span>: <span class="hljs-string">&quot;XTC&quot;</span>, <span class="hljs-string">&quot;38271&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;38415&quot;</span>: <span class="hljs-string">&quot;YE&quot;</span>, <span class="hljs-string">&quot;38426&quot;</span>: <span class="hljs-string">&quot;KH&quot;</span>, <span class="hljs-string">&quot;38461&quot;</span>: <span class="hljs-string">&quot;YD&quot;</span>, <span class="hljs-string">&quot;38463&quot;</span>: <span class="hljs-string">&quot;AE&quot;</span>, <span class="hljs-string">&quot;38466&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;38477&quot;</span>: <span class="hljs-string">&quot;XJ&quot;</span>, <span class="hljs-string">&quot;38518&quot;</span>: <span class="hljs-string">&quot;YT&quot;</span>, <span class="hljs-string">&quot;38551&quot;</span>: <span class="hljs-string">&quot;WK&quot;</span>, <span class="hljs-string">&quot;38585&quot;</span>: <span class="hljs-string">&quot;ZC&quot;</span>, <span class="hljs-string">&quot;38704&quot;</span>: <span class="hljs-string">&quot;XS&quot;</span>, <span class="hljs-string">&quot;38739&quot;</span>: <span class="hljs-string">&quot;LJ&quot;</span>, <span class="hljs-string">&quot;38761&quot;</span>: <span class="hljs-string">&quot;GJ&quot;</span>, <span class="hljs-string">&quot;38808&quot;</span>: <span class="hljs-string">&quot;SQ&quot;</span>, <span class="hljs-string">&quot;39048&quot;</span>: <span class="hljs-string">&quot;JG&quot;</span>, <span class="hljs-string">&quot;39049&quot;</span>: <span class="hljs-string">&quot;XJ&quot;</span>, <span class="hljs-string">&quot;39052&quot;</span>: <span class="hljs-string">&quot;HG&quot;</span>, <span class="hljs-string">&quot;39076&quot;</span>: <span class="hljs-string">&quot;CZ&quot;</span>, <span class="hljs-string">&quot;39271&quot;</span>: <span class="hljs-string">&quot;XT&quot;</span>, <span class="hljs-string">&quot;39534&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;39552&quot;</span>: <span class="hljs-string">&quot;TD&quot;</span>, <span class="hljs-string">&quot;39584&quot;</span>: <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;39647&quot;</span>: <span class="hljs-string">&quot;SB&quot;</span>, <span class="hljs-string">&quot;39730&quot;</span>: <span class="hljs-string">&quot;LG&quot;</span>, <span class="hljs-string">&quot;39748&quot;</span>: <span class="hljs-string">&quot;TPB&quot;</span>, <span class="hljs-string">&quot;40109&quot;</span>: <span class="hljs-string">&quot;ZQ&quot;</span>, <span class="hljs-string">&quot;40479&quot;</span>: <span class="hljs-string">&quot;ND&quot;</span>, <span class="hljs-string">&quot;40516&quot;</span>: <span class="hljs-string">&quot;HG&quot;</span>, <span class="hljs-string">&quot;40536&quot;</span>: <span class="hljs-string">&quot;HG&quot;</span>, <span class="hljs-string">&quot;40583&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;40765&quot;</span>: <span class="hljs-string">&quot;YQ&quot;</span>, <span class="hljs-string">&quot;40784&quot;</span>: <span class="hljs-string">&quot;QJ&quot;</span>, <span class="hljs-string">&quot;40840&quot;</span>: <span class="hljs-string">&quot;YK&quot;</span>, <span class="hljs-string">&quot;40863&quot;</span>: <span class="hljs-string">&quot;QJG&quot;</span> &#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字符串转为拼音首字母大写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; str 需要转化的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">boolean</span>&#125; multi 如果是多音字是否一起输出</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 转化后的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getPY</span> = (<span class="hljs-params">str, multi</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> l = str.<span class="hljs-property">length</span>,<br>    newStr = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; l; i ++) &#123;<br>    <span class="hljs-keyword">let</span> uni = str.<span class="hljs-title function_">charAt</span>(i).<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数</span><br>    <span class="hljs-keyword">if</span> (uni &gt; <span class="hljs-number">40869</span> || uni &lt; <span class="hljs-number">19968</span>) &#123;<br>      newStr += str.<span class="hljs-title function_">charAt</span>(i);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> (multi) &#123;<br>      <span class="hljs-comment">// 检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母</span><br>      <span class="hljs-keyword">if</span> (oMultiDiff[uni]) &#123;<br>        newStr += oMultiDiff[uni];<br>        <span class="hljs-keyword">continue</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        newStr += strChineseFirstPY.<span class="hljs-title function_">charAt</span>(uni - <span class="hljs-number">19968</span>);<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      newStr += strChineseFirstPY.<span class="hljs-title function_">charAt</span>(uni - <span class="hljs-number">19968</span>);<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> newStr.<span class="hljs-title function_">toUpperCase</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><p>来吧，展示</p><iframe  width='100%' height='300'  src='//jsrun.net/QCsKp/embedded/all/light'  allowfullscreen='allowfullscreen' frameborder='0'></iframe>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发者工具 ? Enable IDE Service (y/N) ESC[27D ESC[27C</title>
    <link href="/2022/11/07/wx/hbuilderx-run-error/"/>
    <url>/2022/11/07/wx/hbuilderx-run-error/</url>
    
    <content type="html"><![CDATA[<h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><span class="label label-info">HBuilderX</span> 中运行小程序到 <span class="label label-info">微信开发者工具</span> 时报一以下  错误：<p><img src="/img/wx/wx7.png" alt="运行报错"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在 <span class="label label-info">微信开发者工具</span> 的 <code>设置 =&gt; 安全</code> 中配置：</p><p><img src="/img/wx/wx8.png" alt="解决方法"></p>]]></content>
    
    
    <categories>
      
      <category>微信</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信</tag>
      
      <tag>微信开发者工具</tag>
      
      <tag>HBuilderX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用工具函数</title>
    <link href="/2022/11/05/js/utils/"/>
    <url>/2022/11/05/js/utils/</url>
    
    <content type="html"><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><iframe  width='100%' height='300'  src="//jsrun.net/GzsKp/embedded/all/light"  allowfullscreen='allowfullscreen' frameborder='0'></iframe><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><iframe  width='100%' height='300'  src='//jsrun.net/eCsKp/embedded/all/light'  allowfullscreen='allowfullscreen' frameborder='0'></iframe><div class="note note-success">            <p>Tip<br>防抖、节流函数更详细的说明：见<a href="https://asurahu.gitee.io/2022/10/01/js/limit/">函数节流和防抖</a></p>          </div><h2 id="根据对象数组中某个字段进行分组"><a href="#根据对象数组中某个字段进行分组" class="headerlink" title="根据对象数组中某个字段进行分组"></a>根据对象数组中某个字段进行分组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">arrGroup</span> = (<span class="hljs-params">arr, key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> newArr = [];<br>  <span class="hljs-keyword">let</span> newObj = &#123;&#125;;<br>  <br>  <span class="hljs-comment">// 利用对象的key值不允许重复的特性</span><br>  <span class="hljs-keyword">let</span> temp = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> item = arr[i];<br>    <span class="hljs-keyword">if</span> (temp.<span class="hljs-title function_">hasOwnProperty</span>(item[key])) &#123;<br>      newArr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (v.<span class="hljs-property">key</span> === item[key]) &#123;<br>          v.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(item)<br>        &#125;<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      newObj = &#123;<br>        <span class="hljs-attr">key</span>: item[key],<br>        <span class="hljs-attr">list</span>: [item]<br>      &#125;<br>      temp[item[key]] = <span class="hljs-string">&#x27;0&#x27;</span><br>      newArr.<span class="hljs-title function_">push</span>(newObj)<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> newArr;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用：</p><iframe  width='100%' height='300'  src='//jsrun.net/ECsKp/embedded/all/light'  allowfullscreen='allowfullscreen' frameborder='0'></iframe><h2 id="要是能重来-数组排序-Array-sort"><a href="#要是能重来-数组排序-Array-sort" class="headerlink" title="要是能重来 - 数组排序 (Array.sort)"></a>要是能重来 - 数组排序 (Array.sort)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">26</span>, <span class="hljs-number">21</span>];<br><br><span class="hljs-keyword">let</span> list = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">23</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><ul><li>从小到大</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);<br>list.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.<span class="hljs-property">age</span> - b.<span class="hljs-property">age</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);<br></code></pre></td></tr></table></figure><ul><li>从大到小</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a);<br>list.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b.<span class="hljs-property">age</span> - a.<span class="hljs-property">age</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);<br></code></pre></td></tr></table></figure><ul><li>随机排序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>);<br>list.<span class="hljs-title function_">sort</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);<br></code></pre></td></tr></table></figure><ul><li>来吧，展示</li></ul><iframe  width='100%' height='300'  src='//jsrun.net/qAsKp/embedded/all/light'  allowfullscreen='allowfullscreen' frameborder='0'></iframe><h2 id="未完，补充ing"><a href="#未完，补充ing" class="headerlink" title="未完，补充ing"></a>未完，补充ing</h2>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>工具函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组扁平化</title>
    <link href="/2022/10/30/js/array-flatten/"/>
    <url>/2022/10/30/js/array-flatten/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>描述：</p><p>将多级嵌套数组，类似: <code>[1, [2, [3, [4, 5]]], 6]</code> 将其扁平化处理， 得到: <code>[1,2,3,4,5,6]</code></p><h2 id="扁平化"><a href="#扁平化" class="headerlink" title="扁平化"></a>扁平化</h2><p><strong>定义</strong>：扁平化就是将多维数组变成一维数组，不存在数组的嵌套</p><h2 id="实现扁平化的方法，封装-flatten"><a href="#实现扁平化的方法，封装-flatten" class="headerlink" title="实现扁平化的方法，封装 flatten"></a>实现扁平化的方法，封装 <code>flatten</code></h2><p>备用数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]]], <span class="hljs-number">6</span>, [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]]];<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], <span class="hljs-number">7</span>, [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]];<br><span class="hljs-keyword">const</span> arr3 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>,[<span class="hljs-number">0</span>, <span class="hljs-number">5</span>], <span class="hljs-title class_">NaN</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">undefined</span>, [<span class="hljs-literal">undefined</span>, <span class="hljs-number">11</span>]];<br></code></pre></td></tr></table></figure><h3 id="1-ES6-flat"><a href="#1-ES6-flat" class="headerlink" title="1. ES6 flat"></a>1. ES6 flat</h3><p>数组方法：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat"><strong>Array.prototype.flat()</strong></a></p><p><code>flat()</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">flat</span>()<br><span class="hljs-title function_">flat</span>(depth)<br></code></pre></td></tr></table></figure><ul><li>参数：</li></ul><p><code>depth</code> (可选) 指定要提取嵌套数组的结构深度,默认值为 1</p><ul><li>返回值：</li></ul><p>返回一个新数组,包含数组与提取嵌套数组的所有元素的新数组</p><p>使用 <code>Infinity</code> ，可展开任意深度的嵌套数组</p><ul><li>封装：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten1</span>(<span class="hljs-params">params</span>) &#123;<br>  <span class="hljs-keyword">return</span> params.<span class="hljs-title function_">flat</span>(<span class="hljs-title class_">Infinity</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-toString"><a href="#2-toString" class="headerlink" title="2. toString"></a>2. toString</h3><p>如果数组的项全为<font color="red">数字</font>，可以使用 <code>join()</code> ，<code>toString()</code>。可以利用数组 <code>toString()</code> 转为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten2</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span><span class="hljs-built_in">parseFloat</span>(item))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-利用正则表达式"><a href="#3-利用正则表达式" class="headerlink" title="3. 利用正则表达式"></a>3. 利用正则表达式</h3><p><strong>原理</strong>：对于嵌套的数组,如果在字符串的角度上看就是多了很多<code>[</code> 和 <code>]</code>,如果把它们替换就可以实现简单的扁平化.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten3</span> (arr) &#123;<br>  <span class="hljs-keyword">let</span> str= <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\[|\])/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>  str = <span class="hljs-string">&#x27;[&#x27;</span> + str + <span class="hljs-string">&#x27;]&#x27;</span>;<br>  arr = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(str);<br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-使用循环递归"><a href="#4-使用循环递归" class="headerlink" title="4. 使用循环递归"></a>4. 使用循环递归</h3><h4 id="4-1-循环-concat-push"><a href="#4-1-循环-concat-push" class="headerlink" title="4.1 循环 + concat + push"></a>4.1 循环 + <code>concat</code> + <code>push</code></h4><ul><li>当只有一层嵌套数组使用 <code>push</code> 的方式扁平化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> result = [];<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], <span class="hljs-number">7</span>, [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr2.<span class="hljs-property">length</span>; i++) &#123;<br>  result = result.<span class="hljs-title function_">concat</span>((arr2[i]));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>如果有多层嵌套的数组就需要使用 <strong>递归的思想</strong> :</p><ol><li>循环判断数组的每一项是否是数组: <code>Array.isArray(arr[i])</code></li><li>是数组就递归调用上面的扁平化一层的代码 <code>result = result.concat(flatten(arr[i]))</code>;</li><li>不是数组,直接通过push添加到返回值数组</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten41</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr[i])) &#123;<br>      result = result.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">flatten</span>(arr[i]));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result.<span class="hljs-title function_">push</span>(arr[i])<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 递归版本的反嵌套</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten42</span>(<span class="hljs-params">array</span>) &#123;<br>  <span class="hljs-keyword">var</span> flattend = [];<br>  (<span class="hljs-keyword">function</span> <span class="hljs-title function_">flat</span>(<span class="hljs-params">array</span>) &#123;<br>    array.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">el</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(el)) <span class="hljs-title function_">flat</span>(el);<br>      <span class="hljs-keyword">else</span> flattend.<span class="hljs-title function_">push</span>(el);<br>    &#125;);<br>  &#125;)(array);<br>  <span class="hljs-keyword">return</span> flattend;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-增加参数控制扁平化深度"><a href="#4-2-增加参数控制扁平化深度" class="headerlink" title="4.2 增加参数控制扁平化深度"></a>4.2 增加参数控制扁平化深度</h4><p>这个可以理解为手写数组的 <code>flat()</code> 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// forEach 遍历数组会自动跳过空元素</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">eachFlat</span> = (<span class="hljs-params">arr = [], depth = <span class="hljs-number">1</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> result = []; <span class="hljs-comment">// 缓存递归结果</span><br>  <span class="hljs-comment">// 开始递归</span><br>  (<span class="hljs-keyword">function</span> <span class="hljs-title function_">flat</span>(<span class="hljs-params">arr, depth</span>) &#123;<br>    <span class="hljs-comment">// forEach 会自动去除数组空位</span><br>    arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 控制递归深度</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(item) &amp;&amp; depth &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 递归数组</span><br>        <span class="hljs-title function_">flat</span>(item, depth - <span class="hljs-number">1</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 缓存元素</span><br>        result.<span class="hljs-title function_">push</span>(item)<br>      &#125;<br>    &#125;)<br>  &#125;)(arr, depth)<br>  <span class="hljs-comment">// 返回递归结果</span><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// for of 循环不能去除数组空位，需要手动去除</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">forFlat</span> = (<span class="hljs-params">arr = [], depth = <span class="hljs-number">1</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> result = [];<br>  (<span class="hljs-keyword">function</span> <span class="hljs-title function_">flat</span>(<span class="hljs-params">arr, depth</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(item) &amp;&amp; depth &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-title function_">flat</span>(item, depth - <span class="hljs-number">1</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 去除空元素，添加非 undefined 元素</span><br>        item !== <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> &amp;&amp; result.<span class="hljs-title function_">push</span>(item);<br>      &#125;<br>    &#125;<br>  &#125;)(arr, depth)<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-巧用数组的-reduce-方法"><a href="#4-3-巧用数组的-reduce-方法" class="headerlink" title="4.3 巧用数组的 reduce 方法"></a>4.3 巧用数组的 reduce 方法</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce</a> 方法为数组中的每个元素按序执行一个 <code>reducer</code> 函数,每一次运行 <code>reducer</code> 会将先前元素的计算结构作为参数传入,最后将其结果汇总为单个返回值。</p><p>第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被作为初始值 <em>initialValue</em>，迭代器将从第二个元素开始执行（索引为 1 而不是 0）。</p><ul><li>语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 箭头函数</span><br><span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">previousValue, currentValue</span>) =&gt;</span> &#123; <span class="hljs-comment">/* … */</span> &#125; )<br><span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">previousValue, currentValue, currentIndex</span>) =&gt;</span> &#123; <span class="hljs-comment">/* … */</span> &#125; )<br><span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">previousValue, currentValue, currentIndex, array</span>) =&gt;</span> &#123; <span class="hljs-comment">/* … */</span> &#125; )<br><br><span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">previousValue, currentValue</span>) =&gt;</span> &#123; <span class="hljs-comment">/* … */</span> &#125; , initialValue)<br><span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">previousValue, currentValue, currentIndex</span>) =&gt;</span> &#123; <span class="hljs-comment">/* … */</span> &#125; , initialValue)<br><span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">previousValue, currentValue, currentIndex, array</span>) =&gt;</span> &#123; <span class="hljs-comment">/* … */</span> &#125;, initialValue)<br><br><span class="hljs-comment">// 回调函数</span><br><span class="hljs-title function_">reduce</span>(callbackFn)<br><span class="hljs-title function_">reduce</span>(callbackFn, initialValue)<br><br><span class="hljs-comment">// 内联回调函数</span><br><span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">previousValue, currentValue</span>) &#123; <span class="hljs-comment">/* … */</span> &#125;)<br><span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">previousValue, currentValue, currentIndex</span>) &#123; <span class="hljs-comment">/* … */</span> &#125;)<br><span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">previousValue, currentValue, currentIndex, array</span>) &#123; <span class="hljs-comment">/* … */</span> &#125;)<br><br><span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">previousValue, currentValue</span>) &#123; <span class="hljs-comment">/* … */</span> &#125;, initialValue)<br><span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">previousValue, currentValue, currentIndex</span>) &#123; <span class="hljs-comment">/* … */</span> &#125;, initialValue)<br><span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">previousValue, currentValue, currentIndex, array</span>) &#123; <span class="hljs-comment">/* … */</span> &#125;, initialValue)<br></code></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li><p>callbackFn，一个“reducer”函数，包含四个参数：</p><ul><li><code>previousValue</code>：上一次调用 <code>callbackFn</code> 时的返回值。在第一次调用时，若指定了初始值 <code>initialValue</code>，其值则为 <code>initialValue</code>，否则为数组索引为 0 的元素 <code>array[0]</code>。</li><li><code>currentValue</code>：数组中正在处理的元素。在第一次调用时，若指定了初始值 <code>initialValue</code>，其值则为数组索引为 0 的元素 <code>array[0]</code>，否则为 <code>array[1]</code>。</li><li><code>currentIndex</code>：数组中正在处理的元素的索引。若指定了初始值 <code>initialValue</code>，则起始索引号为 0，否则从索引 1 起始。</li><li>array：用于遍历的数组。</li></ul></li><li><p>initialValue (可选)<br>作为第一次调用 <code>callback</code> 函数时参数 <code>previousValue</code> 的值。若指定了初始值 <code>initialValue</code>，则 <code>currentValue</code> 则将使用数组第一个元素；否则 <code>previousValue</code> 将使用数组第一个元素，而 <code>currentValue</code> 将使用数组第二个元素。</p></li></ul></li><li><p>返回值</p></li></ul><p>使用“reducer”回调函数遍历整个数组后的结果。</p><p>解析第一层数组时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> result = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, val</span>) =&gt;</span> acc.<span class="hljs-title function_">concat</span>(val), []);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result&#x27;</span>, result);<br></code></pre></td></tr></table></figure><p>对于多层级嵌套的数组, 这个时候就需要使用递归的思想来解决问题了。再次遍历数组,发现数组元素任然是数组的时候,再次执行上面扁平化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">flatten43</span> = (<span class="hljs-params">arr, deep = <span class="hljs-number">1</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (deep &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> arr;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">res, curr</span>) =&gt;</span> res.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(curr) ? <span class="hljs-title function_">flatten43</span>(curr, deep - <span class="hljs-number">1</span>) : curr), [])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-使用堆栈-stack-避免递归"><a href="#5-使用堆栈-stack-避免递归" class="headerlink" title="5. 使用堆栈 stack 避免递归"></a>5. 使用堆栈 stack 避免递归</h3><p>递归循环都可通过维护一个堆结构来解决</p><p>如果不使用递归数组来实现扁平化,可以使用堆栈来解决</p><p>深度的控制比较低效，因为需要检查每一个值的深度</p><p>思路</p><ul><li>把数组通过一个栈来维护</li><li>当栈不为空的时候循环执行处理</li><li><code>pop()</code>将栈尾出栈</li><li>如果出栈的元素是数组，就将该元素解构后每一元素进行入栈操作</li><li>出栈的元素不是数组就<code>push</code>进返回值<code>res</code></li><li>反转恢复原数组的顺序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten5</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">const</span> stack = [...arr];<br>  <span class="hljs-keyword">const</span> res = [];<br>  <span class="hljs-keyword">while</span> (stack.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-comment">// 使用 pop 从 stack 中取出并移除值</span><br>    <span class="hljs-keyword">const</span> next = stack.<span class="hljs-title function_">pop</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(next)) &#123;<br>      <span class="hljs-comment">// 使用 push 送回内层数组中的元素，不会改动原始输入</span><br>      stack.<span class="hljs-title function_">push</span>(...next);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">push</span>(next);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 反转恢复原数组的顺序</span><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">reverse</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-while-循环-some-方法"><a href="#6-while-循环-some-方法" class="headerlink" title="6. while 循环 + some 方法"></a>6. while 循环 + some 方法</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some">some()</a> 方法: 测试数组中是不是至少有 1 个元素通过了被提供的函数测试。它返回的是一个 <code>Boolean</code> 类型的值。</p><p>通过<code>some()</code>来判断数组中是否有数组，通过<code>while</code>不断循环执行判断, 如果是数组的话可以使用 <code>拓展运算符...</code> <code>...</code> 每次只能展开最外层的数组，加上<code>contact</code>来减少嵌套层数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten6</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">while</span> (arr.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(item))) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...arr)<br>    arr = [].<span class="hljs-title function_">concat</span>(...arr)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="来吧，先展示"><a href="#来吧，先展示" class="headerlink" title="来吧，先展示"></a>来吧，先展示</h2><iframe  width="100%" height="500"  src="//jsrun.net/B6sKp/embedded/js,result/light"  allowfullscreen="allowfullscreen" frameborder="0"></iframe><div class="note note-success">            <p>参考<br><a href="https://juejin.cn/post/7118763684209524767#heading-1">《数组扁平化》</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
      <tag>Array</tag>
      
      <tag>扁平化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>淘宝镜像</title>
    <link href="/2022/10/30/node/npm-mirror-image/"/>
    <url>/2022/10/30/node/npm-mirror-image/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>Tip<br><strong>原淘宝npm域名即将停止解析</strong>，详情见 <a href="https://developer.aliyun.com/mirror/NPM">官方说明</a></p>          </div><p><code>http://npm.taobao.org</code> 和 <code>http://registry.npm.taobao.org</code> 将在 2022.06.30 号正式下线和停止 DNS 解析。</p><p>新域名为 <code>npmmirror.com</code>, 相关服务域名切换规则请参考：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">http://npm.taobao.org =&gt; http://npmmirror.com<br><br>http://registry.npm.taobao.org =&gt; http://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h2 id="npm-淘宝镜像"><a href="#npm-淘宝镜像" class="headerlink" title="npm 淘宝镜像"></a><code>npm</code> 淘宝镜像</h2><ol><li>使用 <code>npm config set registry http://registry.npmmirror.com</code>，切换国内镜像，使用淘宝镜像;</li><li>使用 <code>npm config get registry</code>，查看当前镜像使用的地址，看是否是刚才设置的地址；</li></ol><p>如果国内镜像使用不合适，则可切换为默认镜像（国外）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org<br></code></pre></td></tr></table></figure><h2 id="cnpm-淘宝镜像"><a href="#cnpm-淘宝镜像" class="headerlink" title="cnpm 淘宝镜像"></a><code>cnpm</code> 淘宝镜像</h2><ol><li>使用 <code>npm install -g cnpm --registry=http://registry.npmmirror.com</code> ，安装 cnpm</li><li>使用 <code>cnpm install xxx</code> ，使用cnpm安装所想要的包</li><li>使用 <code>cnpm -v</code> ，查看版本</li></ol><p><code>cnpm</code> 安装依赖包的方式和 <code>npm</code> 是一样，只是 <code>npm</code> 的命令变成 <code>cnpm</code></p><p>以上两种模式的对比，<code>cnpm</code> 在安装某些包的时候，<code>package</code> 环境不是很正确，所以推荐使用 <code>npm</code> 安装淘宝镜像</p><div class="note note-success">            <p>参考：<br><a href="https://blog.csdn.net/weixin_47872288/article/details/124787077">npm配置安装淘宝镜像（全）</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
      <tag>npm</tag>
      
      <tag>cnpm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让文字立起来</title>
    <link href="/2022/10/29/css/font-3d/"/>
    <url>/2022/10/29/css/font-3d/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>SHADOW<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: gray;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-weight</span>: bolder;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;SHADOW&#x27;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;<br><br>  <span class="hljs-comment">/* 倾斜 skew,  */</span><br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">40px</span>, -<span class="hljs-number">5px</span>) <span class="hljs-built_in">skew</span>(<span class="hljs-number">50deg</span>);<br><br>  <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">/* 模糊 */</span><br>  <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);<br><br>  <span class="hljs-comment">/* 添加遮罩层 */</span><br>  -webkit-<span class="hljs-attribute">mask-image</span>: <span class="hljs-built_in">linear-gradient</span>(transparent, <span class="hljs-number">#000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><iframe  src="https://code.juejin.cn/pen/7159612893493723168"  width="100%"  height="400"></iframe>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义滚动条</title>
    <link href="/2022/10/29/css/scroll-bar/"/>
    <url>/2022/10/29/css/scroll-bar/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义滚动条"><a href="#自定义滚动条" class="headerlink" title="自定义滚动条"></a>自定义滚动条</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test test-1&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scrollbar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test test-2&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scrollbar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.test</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">overflow</span>: auto;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>&#125;<br><span class="hljs-selector-class">.scrollbar</span> &#123;<br>  <span class="hljs-attribute">width</span> : <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><span class="hljs-selector-class">.test-1</span>::-webkit-scrollbar &#123;<br>  <span class="hljs-comment">/*滚动条整体样式*/</span><br>  <span class="hljs-attribute">width</span> : <span class="hljs-number">10px</span>;  <span class="hljs-comment">/*高宽分别对应横竖滚动条的尺寸*/</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1px</span>;<br>&#125;<br><span class="hljs-selector-class">.test-1</span>::-webkit-scrollbar-thumb &#123;<br>  <span class="hljs-comment">/*滚动条里面小方块*/</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">box-shadow</span>   : inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);<br>  <span class="hljs-attribute">background</span>   : <span class="hljs-number">#535353</span>;<br>&#125;<br><span class="hljs-selector-class">.test-1</span>::-webkit-scrollbar-track &#123;<br>  <span class="hljs-comment">/*滚动条里面轨道*/</span><br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#ededed</span>;<br>&#125;<br><br><span class="hljs-selector-class">.test-2</span>::-webkit-scrollbar &#123;<br>  <span class="hljs-comment">/*滚动条整体样式*/</span><br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;  <span class="hljs-comment">/*高宽分别对应横竖滚动条的尺寸*/</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1px</span>;<br>&#125;<br><span class="hljs-selector-class">.test-2</span>::-webkit-scrollbar-thumb &#123;<br>  <span class="hljs-comment">/*滚动条里面小方块*/</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-color</span>: skyblue;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(<br>    <span class="hljs-number">45deg</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.2</span>) <span class="hljs-number">25%</span>,<br>    transparent <span class="hljs-number">25%</span>,<br>    transparent <span class="hljs-number">50%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.2</span>) <span class="hljs-number">50%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.2</span>) <span class="hljs-number">75%</span>,<br>    transparent <span class="hljs-number">75%</span>,<br>    transparent<br>  );<br>&#125;<br><span class="hljs-selector-class">.test-2</span>::-webkit-scrollbar-track &#123;<br><span class="hljs-comment">/*滚动条里面轨道*/</span><br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#ededed</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.test</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动手试试"><a href="#动手试试" class="headerlink" title="动手试试"></a>动手试试</h2><iframe  src="https://code.juejin.cn/pen/7159132508016246799"  width="100%"  height="400"></iframe>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运行 Hexo 命令时报错</title>
    <link href="/2022/10/28/hexo/hexo-error/"/>
    <url>/2022/10/28/hexo/hexo-error/</url>
    
    <content type="html"><![CDATA[<h2 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h2><p>运行如 <code>hexo -v</code> <code>hexo init</code> <code>hexo server</code> 等命令时，出现如下错误时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">heox : 无法将“heox”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。<br>所在位置 行:1 字符: 1<br>+ heox -v<br>+ ~~~~<br>    + CategoryInfo          : ObjectNotFound: (heox:String) [], CommandNotFoundException<br>    + FullyQualifiedErrorId : CommandNotFoundException<br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>以管理员身份运行 <code>powershell</code></li></ul><p><img src="/img/hexo/hexo6.png" alt="powershell"></p><ul><li>执行一下命令 <code>set-ExecutionPolicy RemoteSigned</code> 再输入 <code>A</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">PS C:\WINDOWS\system32&gt; set-ExecutionPolicy RemoteSigned<br><br>执行策略更改<br>执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170<br>中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?<br>[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): A<br>PS C:\WINDOWS\system32&gt;<br></code></pre></td></tr></table></figure><ul><li>最后再执行 <code>Hexo</code> 的相关命令就可以了</li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组去重的各种方法解析</title>
    <link href="/2022/10/20/js/array-unique/"/>
    <url>/2022/10/20/js/array-unique/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>记录一些 <font color="red">数组去重</font> 的方法。虽然大多时候的数据去重都是后端做的，但是前端需要去重的地方也是有的。</p>          </div><div class="note note-success">            <p>参考：<a href="https://segmentfault.com/a/1190000016418021">JavaScript 数组去重的方法（12 种方法，史上最全）</a></p>          </div><p>例子中去重的数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;true&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-string">&#x27;NaN&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, &#123;&#125;, &#123;&#125;];<br></code></pre></td></tr></table></figure><h2 id="1-利用-ES6-Set-去重"><a href="#1-利用-ES6-Set-去重" class="headerlink" title="1. 利用 ES6 Set 去重"></a>1. 利用 <code>ES6 Set</code> 去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span> (arr) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr))<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// [1, &#x27;true&#x27;, true, 15, false, undefined, null, NaN, &#x27;NaN&#x27;, 0, &#x27;a&#x27;, &#123;&#125;, &#123;&#125;]</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> newArr = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">newArr</span>(arr))<br><span class="hljs-comment">// [1, &#x27;true&#x27;, true, 15, false, undefined, null, NaN, &#x27;NaN&#x27;, 0, &#x27;a&#x27;, &#123;&#125;, &#123;&#125;]</span><br></code></pre></td></tr></table></figure><p><code>ES6</code> 中最常用的去重方法。不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉 <code>&#123;&#125;</code> 空对象，后面的高阶方法会添加去掉重复 <code>&#123;&#125;</code> 的方法。</p><h2 id="2-利用-for-嵌套-for，然后-splice-去重"><a href="#2-利用-for-嵌套-for，然后-splice-去重" class="headerlink" title="2. 利用 for 嵌套 for，然后 splice 去重"></a>2. 利用 <code>for</code> 嵌套 <code>for</code>，然后 <code>splice</code> 去重</h2><p>双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>)&#123;            <br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i+<span class="hljs-number">1</span>; j&lt;arr.<span class="hljs-property">length</span>; j++)&#123;<br>      <span class="hljs-comment">// splice方法删除第二个， 去重采用 == 还是 === 可以根据，实际需求</span><br>      <span class="hljs-keyword">if</span>(arr[i]==arr[j])&#123; <span class="hljs-comment">// 不能去重类似 1 和 &#x27;1&#x27;，这样的元素</span><br>      <span class="hljs-comment">// if(arr[i]===arr[j])&#123; // 可以重类似 1 和 &#x27;1&#x27;，这样的元素</span><br>        arr.<span class="hljs-title function_">splice</span>(j,<span class="hljs-number">1</span>);<br>        j--;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// NaN和&#123;&#125;没有去重，两个null直接消失了</span><br><span class="hljs-comment">// [1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span><br></code></pre></td></tr></table></figure><h2 id="3-利用-indexOf-去重"><a href="#3-利用-indexOf-去重" class="headerlink" title="3. 利用 indexOf 去重"></a>3. 利用 <code>indexOf</code> 去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-keyword">var</span> array = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (array .<span class="hljs-title function_">indexOf</span>(arr[i]) === -<span class="hljs-number">1</span>) &#123;<br>        array .<span class="hljs-title function_">push</span>(arr[i])<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// NaN、&#123;&#125; 没有去重</span><br><span class="hljs-comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span><br></code></pre></td></tr></table></figure><h2 id="4-利用-sort"><a href="#4-利用-sort" class="headerlink" title="4. 利用 sort()"></a>4. 利用 <code>sort()</code></h2><p>利用 <code>sort()</code> 排序方法，然后根据排序后的结果进行遍历及相邻元素比对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  arr = arr.<span class="hljs-title function_">sort</span>()<br>  <span class="hljs-keyword">var</span> arrry= [arr[<span class="hljs-number">0</span>]];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] !== arr[i-<span class="hljs-number">1</span>]) &#123;<br>      arrry.<span class="hljs-title function_">push</span>(arr[i]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> arrry;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;&#125;, &#123;&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]</span><br><span class="hljs-comment">// NaN、&#123;&#125;没有去重</span><br></code></pre></td></tr></table></figure><h2 id="5-利用对象的属性不能相同的特点进行去重"><a href="#5-利用对象的属性不能相同的特点进行去重" class="headerlink" title="5. 利用对象的属性不能相同的特点进行去重"></a>5. 利用对象的属性不能相同的特点进行去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-keyword">var</span> arrry= [];<br>  <span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!obj[arr[i]]) &#123;<br>      arrry.<span class="hljs-title function_">push</span>(arr[i])<br>      obj[arr[i]] = <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      obj[arr[i]]++<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> arrry;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// [1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;&#125;]</span><br><span class="hljs-comment">// 两个true直接去掉了，NaN 和 &#123;&#125; 去重</span><br></code></pre></td></tr></table></figure><h2 id="6-利用-includes"><a href="#6-利用-includes" class="headerlink" title="6. 利用 includes"></a>6. 利用 <code>includes</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;type error!&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-keyword">var</span> array =[];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span>(!array.<span class="hljs-title function_">includes</span>(arr[i]) ) &#123; <span class="hljs-comment">// includes 检测数组是否有某个值</span><br>      array.<span class="hljs-title function_">push</span>(arr[i]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> array<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span><br><span class="hljs-comment">// &#123;&#125; 没有去重</span><br></code></pre></td></tr></table></figure><h2 id="7-利用-hasOwnProperty"><a href="#7-利用-hasOwnProperty" class="headerlink" title="7. 利用 hasOwnProperty"></a>7. 利用 <code>hasOwnProperty</code></h2><p>利用 hasOwnProperty 判断是否存在对象属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>)&#123;<br>    <span class="hljs-keyword">return</span> obj.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-keyword">typeof</span> item + item) ? <span class="hljs-literal">false</span> : (obj[<span class="hljs-keyword">typeof</span> item + item] = <span class="hljs-literal">true</span>)<br>  &#125;)<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;]</span><br><span class="hljs-comment">// 所有的都去重了</span><br></code></pre></td></tr></table></figure><h2 id="8-利用-filter"><a href="#8-利用-filter" class="headerlink" title="8. 利用 filter"></a>8. 利用 <code>filter</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>) &#123;<br>    <span class="hljs-comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span><br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">indexOf</span>(item, <span class="hljs-number">0</span>) === index;<br>  &#125;);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span><br><span class="hljs-comment">// NaN 没了，&#123;&#125; 没有去重</span><br></code></pre></td></tr></table></figure><h2 id="9-利用递归去重"><a href="#9-利用递归去重" class="headerlink" title="9. 利用递归去重"></a>9. 利用递归去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">var</span> array= arr;<br>  <span class="hljs-keyword">var</span> len = array.<span class="hljs-property">length</span>;<br><br>  array.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123; <span class="hljs-comment">// 排序后更加方便去重</span><br>    <span class="hljs-keyword">return</span> a - b;<br>  &#125;)<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params">index</span>)&#123;<br>    <span class="hljs-keyword">if</span>(index &gt;= <span class="hljs-number">1</span>)&#123;<br>      <span class="hljs-keyword">if</span>(array[index] === array[index-<span class="hljs-number">1</span>])&#123;<br>        array.<span class="hljs-title function_">splice</span>(index,<span class="hljs-number">1</span>);<br>      &#125;<br>      <span class="hljs-title function_">loop</span>(index - <span class="hljs-number">1</span>); <span class="hljs-comment">// 递归loop，然后数组去重</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">loop</span>(len-<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// [1, &#x27;true&#x27;, false, null, 0, true, 15, NaN, NaN, &#x27;NaN&#x27;, &#x27;a&#x27;, &#123;&#125;, &#123;&#125;, undefined]</span><br><span class="hljs-comment">// NaN、&#123;&#125; 没有去重</span><br></code></pre></td></tr></table></figure><h2 id="10-利用-Map-数据结构去重"><a href="#10-利用-Map-数据结构去重" class="headerlink" title="10. 利用 Map 数据结构去重"></a>10. 利用 <code>Map</code> 数据结构去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayNonRepeatfy</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>  <span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();  <span class="hljs-comment">// 数组用于返回结果</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span>(map.<span class="hljs-title function_">has</span>(arr[i])) &#123;  <span class="hljs-comment">// 如果有该key值</span><br>      map.<span class="hljs-title function_">set</span>(arr[i], <span class="hljs-literal">true</span>); <br>    &#125; <span class="hljs-keyword">else</span> &#123; <br>      map.<span class="hljs-title function_">set</span>(arr[i], <span class="hljs-literal">false</span>);   <span class="hljs-comment">// 如果没有该key值</span><br>      array.<span class="hljs-title function_">push</span>(arr[i]);<br>    &#125;<br>  &#125; <br>  <span class="hljs-keyword">return</span> array ;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">// [1, &#x27;true&#x27;, false, null, 0, true, 15, NaN, NaN, &#x27;NaN&#x27;, &#x27;a&#x27;, &#123;&#125;, &#123;&#125;, undefined]</span><br><span class="hljs-comment">// NaN、&#123;&#125; 没有去重</span><br></code></pre></td></tr></table></figure><h2 id="11-利用-reduce-includes"><a href="#11-利用-reduce-includes" class="headerlink" title="11. 利用 reduce + includes"></a>11. 利用 <code>reduce</code> + <code>includes</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>)&#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev,cur</span>) =&gt;</span> prev.<span class="hljs-title function_">includes</span>(cur) ? prev : [...prev,cur],[]);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr));<br><span class="hljs-comment">// [1, &#x27;true&#x27;, false, null, 0, true, 15, NaN, &#x27;NaN&#x27;, &#x27;a&#x27;, &#123;&#125;, &#123;&#125;, undefined]</span><br><span class="hljs-comment">// NaN、&#123;&#125; 没有去重</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Charles 注册</title>
    <link href="/2022/10/16/tools/charles-register/"/>
    <url>/2022/10/16/tools/charles-register/</url>
    
    <content type="html"><![CDATA[<p>Charles 要是不注册，就会没隔30分钟有个弹框，点击就会关闭软件，然后就要重新启动软件。并且每次启动会有10秒种的延时。</p><p>解决办法：Help &gt; Registered</p><p><img src="/img/tools/t16.jpg" alt="注册"></p><p>输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Registered Name: https://zhile.io<br>License Key: 48891cf209c6d32bf4<br></code></pre></td></tr></table></figure><p>设置完后，重启就好了。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>抓包</tag>
      
      <tag>Charles</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Charles 抓包工具，安装与使用</title>
    <link href="/2022/10/16/tools/charles/"/>
    <url>/2022/10/16/tools/charles/</url>
    
    <content type="html"><![CDATA[<h2 id="一、-下载安装"><a href="#一、-下载安装" class="headerlink" title="一、 下载安装"></a>一、 下载安装</h2><div class="note note-success">            <p>版本：4.6.3</p>          </div><p>地址：<a href="https://www.charlesproxy.com/latest-release/download.do">Charles</a></p><p>安装：没啥特别得，下一步就完事了。</p><h2 id="二、电脑安装证书"><a href="#二、电脑安装证书" class="headerlink" title="二、电脑安装证书"></a>二、电脑安装证书</h2><p><img src="/img/tools/t1.jpg" alt="安装证书1"></p><p><img src="/img/tools/t2.jpg" alt="安装证书2"></p><p><img src="/img/tools/t3.jpg" alt="安装证书3"></p><p><img src="/img/tools/t4.jpg" alt="安装证书4"></p><p><img src="/img/tools/t5.jpg" alt="安装证书5"></p><p><img src="/img/tools/t6.jpg" alt="安装证书6"></p><p><img src="/img/tools/t7.jpg" alt="安装证书7"></p><p><img src="/img/tools/t8.jpg" alt="安装证书8"></p><p><img src="/img/tools/t9.jpg" alt="安装证书9"></p><h2 id="三、查看链接代理IP和端口"><a href="#三、查看链接代理IP和端口" class="headerlink" title="三、查看链接代理IP和端口"></a>三、查看链接代理IP和端口</h2><p><img src="/img/tools/t10.jpg" alt="查看链接代理IP和端口1"></p><p><img src="/img/tools/t11.jpg" alt="查看链接代理IP和端口2"></p><h2 id="四、手机与电脑连接同一WIFI，并配置代理手动并设置IP和端口"><a href="#四、手机与电脑连接同一WIFI，并配置代理手动并设置IP和端口" class="headerlink" title="四、手机与电脑连接同一WIFI，并配置代理手动并设置IP和端口"></a>四、手机与电脑连接同一WIFI，并配置代理手动并设置IP和端口</h2><p>手机配置好端口后，PC的 <code>Charles</code> 会弹出下面的弹框:</p><p><img src="/img/tools/t12.jpg" alt="手机配置IP和端口"></p><p>点击右边的 <code>allow</code></p><h2 id="五、手机浏览下载证书并安装"><a href="#五、手机浏览下载证书并安装" class="headerlink" title="五、手机浏览下载证书并安装"></a>五、手机浏览下载证书并安装</h2><p>手机访问：<a href="http://chls.pro/ssl">http://chls.pro/ssl</a> ，要是不能下载，可以是QQ浏览器（手机端）下载，下载后建后缀名改成 <code>.crt</code></p><p>最后在安装证书，具体手机操作百度。</p><h2 id="六、设置Https抓包"><a href="#六、设置Https抓包" class="headerlink" title="六、设置Https抓包"></a>六、设置Https抓包</h2><p><img src="/img/tools/t13.jpg" alt="开启https"></p><p><img src="/img/tools/t14.jpg" alt="开启https"></p><p>默认没开启 <code>https</code> 抓包，需要设置 <code>SSL</code> 代理：通过主菜单打开 Proxy | SSL Proxy Settings 弹窗，勾选 <code>Enable SSL proxying</code>，点击 Add 按钮，可以过滤出允许 <code>https</code> 访问的网址，如果没有特殊需求，可将这里设置为*，意为全部匹配</p><h2 id="七、浏览器的选择"><a href="#七、浏览器的选择" class="headerlink" title="七、浏览器的选择"></a>七、浏览器的选择</h2><p>需要注意的是，<code>Chrome</code> 和 <code>Firefox</code> 浏览器默认并不使用系统的代理服务器设置，而 <code>Charles</code> 是通过将自己设置成代理服务器来完成封包截取的，所以在默认情况下无法截取 <code>Chrome</code> 和 <code>Firefox</code> 浏览器的网络通讯内容。如果你需要截取的话，在 <code>Chrome</code> 中设置成使用系统的代理服务器设置即可，或者直接将代理服务器设置成 <code>127.0.0.1:8888</code> 也可达到相同效果。</p><h2 id="八、找不到-request-和-response"><a href="#八、找不到-request-和-response" class="headerlink" title="八、找不到 request 和 response"></a>八、找不到 <code>request</code> 和 <code>response</code></h2><p>新版本的 <code>Charles</code> 默认没打开 <code>request</code> 和 <code>response</code> ，打开<code>Edit-&gt;prefrence</code>，选择<code>Viewers</code>，将默认的<code>Combine request and response</code>勾去掉即可</p><p><img src="/img/tools/t15.jpg" alt="Combine request and response"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>抓包</tag>
      
      <tag>Charles</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element 表单字段过多，校验未通过，视图滚动到第一个未通过字段</title>
    <link href="/2022/10/13/element/scroll-validate-field/"/>
    <url>/2022/10/13/element/scroll-validate-field/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>版本：Element 2.12.0<br>js框架: Vue 2.x</p>          </div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;ruleForm&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ruleForm&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;100px&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ruleForm&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-comment">&lt;!-- 前面还有字段 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;ruleForm.name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 后面还有很多字段 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><span class="hljs-attr">methods</span>: &#123;<br>  submit () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">ruleForm</span>.<span class="hljs-title function_">validate</span>(<span class="hljs-function">(<span class="hljs-params">valid</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (valid) &#123;<br>        <span class="hljs-comment">// 校验通过</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 校验失败, 视图滚动到第一个错误字段</span><br>        <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">let</span> isError = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;is-error&#x27;</span>)<br>          isError[<span class="hljs-number">0</span>].<span class="hljs-title function_">scrollIntoView</span>(&#123;<br>            <span class="hljs-comment">// block: start | center | end | nearest</span><br>            <span class="hljs-attr">block</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-comment">// 滚动到视图中心</span><br>            <span class="hljs-comment">// behavior: auto | instant | smooth</span><br>            <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span> <span class="hljs-comment">// 平滑滚动</span><br>          &#125;)<br>        &#125;)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Element</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Element</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公众号(H5)调起微信支付分停车服务</title>
    <link href="/2022/10/12/wx/parkinng-server-h5/"/>
    <url>/2022/10/12/wx/parkinng-server-h5/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><font size="4">需求：</font><br>在微信公众号里，提供用户开通 <code>微信支付分停车服务</code> 的功能<br>一些前提和注意事项见：<a href="https://asurahu.github.io/2022/09/20/wx/open-tag-to-weapp/">H5 页面跳转微信小程序</a><br>框架：vue 2.x</p>          </div><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><img src="/img/wx/wx3.jpg" alt="服务商户跳转参数错误"></p><h3 id="微信开放社区解决方案"><a href="#微信开放社区解决方案" class="headerlink" title="微信开放社区解决方案"></a>微信开放社区解决方案</h3><p>这个问题，其他同学也是有遇到过，<a href="https://developers.weixin.qq.com/community/pay/doc/0002c46de00500b5701eb03c15b400?jumpto=comment">微信开放社区</a></p><p>然后我根据描述的解决方案去一个个排查，但是还是不行。</p><h3 id="本项目的问题原因"><a href="#本项目的问题原因" class="headerlink" title="本项目的问题原因"></a>本项目的问题原因</h3><p>最后是因为参数少传了一个子商户号。客户的商户号是绑在我们公司的子商户下面的，所以在传参的时候就多传了一个 <strong><font color="red">sub_mchid</font></strong> (子商户号)。</p><p>而且在官方文档上没有写这个参数，还是去问的微信技术助手。这个有点坑。后端在写查询是否开通接口了服务的时候，也是各种试都不行，最后问他，也是加这个参数就可以了。</p><p><img src="/img/wx/wx4.jpg" alt="版本说明"></p><p><img src="/img/wx/wx5.jpg" alt="对应关系"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">wx-open-launch-weapp</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isOpenScore&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;launch-btn&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;gh_********&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:path</span>=<span class="hljs-string">&quot;authCreditpayPath&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; display: block&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/wxtag-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="language-css"><span class="language-xml"><span class="language-handlebars">      <span class="hljs-selector-id">#launch-btn</span> &#123;</span></span></span><br><span class="language-css"><span class="language-xml"><span class="language-handlebars">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span></span></span></span><br><span class="language-css"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="language-css"><span class="language-xml"><span class="language-handlebars">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        开通先离场后扣费服务</span></span><br><span class="language-xml"><span class="language-handlebars">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">  </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wx-open-launch-weapp</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br>data () &#123;<br>  <span class="hljs-attr">return</span>: &#123;<br>    <span class="hljs-attr">authCreditpayPath</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  &#125;<br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">authCreditpayPath</span> = <span class="hljs-string">&#x27;/pages/auth-creditpay/auth-creditpay?&#x27;</span> +<br>    <span class="hljs-string">&#x27;mchid=这里是商户号&amp;&#x27;</span> + <span class="hljs-comment">// 商户号</span><br>    <span class="hljs-string">&#x27;sub_mchid=这里是子商户号&amp;&#x27;</span> + <span class="hljs-comment">// 子商户号</span><br>    <span class="hljs-string">&#x27;openid=&#x27;</span> + openid + <span class="hljs-string">&#x27;&amp;&#x27;</span> +<br>    <span class="hljs-string">&#x27;plate_number=&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">plateNumber</span> + <span class="hljs-string">&#x27;&amp;&#x27;</span> +<br>    <span class="hljs-string">&#x27;plate_color=&#x27;</span> + plateColor + <span class="hljs-string">&#x27;&amp;&#x27;</span> +<br>    <span class="hljs-string">&#x27;trade_scene=PARKING&#x27;</span><br>&#125;<br>...<br></code></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>最后成功进入开通页面：</p><p><img src="/img/wx/wx6.jpg" alt="开通页面"></p>]]></content>
    
    
    <categories>
      
      <category>微信</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>微信</tag>
      
      <tag>H5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 中使用评论插件</title>
    <link href="/2022/10/06/hexo/comment/"/>
    <url>/2022/10/06/hexo/comment/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>Tip<br>评论插件：Valine<br>博客主题：Fluid<br>国内用户推荐使用 Valine、Waline 或者 twikoo</p>          </div><p>开启评论需要在主题配置中开启并指定评论模块：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-attr">comments:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 改为 true</span><br>  <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>  <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span> <span class="hljs-comment"># 设置为要用的评论插件，这里用得是 valine 插件</span><br></code></pre></td></tr></table></figure><p>然后在下方还要设置对应评论模块的参数，比如 valine 对应设置：<a href="https://valine.js.org/configuration.html#el">(valine 配置文档)</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config.fluid.yml</span><br><br><span class="hljs-comment"># 这里的配置按个人喜好具体设置</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span> <br>  <span class="hljs-attr">appKey:</span> <br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">请开始你的表演</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;wavatar&#x27;</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>]<br>  <span class="hljs-attr">requiredFields:</span> []<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">emojiCDN:</span><br>  <span class="hljs-attr">emojiMaps:</span><br>  <span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>上述配置中的 <code>appId</code> 和 <code>appKey</code> 需要在 <a href="https://console.leancloud.cn/login">LeanCloud</a> 中获取，有账号可以直接登陆，没有就注册一个。</p><p>注册后需要验证邮箱，通过支付宝绑定身份证，进行身份校验后才能<font color="red">创建应用</font>。</p><p>应用建好后，就可以在应用的设置中查看 <code>appId</code> 和 <code>appKey</code>：</p><p><img src="/img/hexo/hexo1.jpg" alt="设置"></p><p><img src="/img/hexo/hexo2.jpg" alt="查看 appId 和 appKey"></p><p>然后见 <code>appId</code> 和 <code>appKey</code> 拷贝到 <code>_config.fluid.yml</code> 文件，<code>valine</code> 插件相关配置中，之后就可以使用了。</p><p>现在本地运行看下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p><img src="/img/hexo/hexo3.jpg" alt="本地查看"></p><div class="note note-success">            <p>Tip<br>要是某个文章不想使用评论，可以通过 <code>comment: false</code> 关闭</p>          </div><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 文章标题<br>tags: []<br>categories: []<br>index<span class="hljs-emphasis">_img: /img/</span><br><span class="hljs-emphasis">date: 2022-10-06 14:00:54</span><br><span class="hljs-emphasis">comment: false</span><br><span class="hljs-emphasis">---</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>LeanCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器调试 - console</title>
    <link href="/2022/10/05/js/console/"/>
    <url>/2022/10/05/js/console/</url>
    
    <content type="html"><![CDATA[<h2 id="1-打印调试信息-debug"><a href="#1-打印调试信息-debug" class="headerlink" title="1. 打印调试信息 debug"></a>1. 打印调试信息 <code>debug</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&#x27;console.debug&#x27;</span>);<br></code></pre></td></tr></table></figure><p>浏览器没有任何打印信息：<br><img src="/img/js/js9.jpg" alt="浏览器没有任何打印信息"></p><p>这是因为浏览器在默认情况下是隐藏这个调试信息的，如下图，将 ‘Verbose’ 勾选上就可以看到打印信息了：<br><img src="/img/js/js10.jpg" alt="勾选 Verbos 后"></p><h2 id="2-打印信息"><a href="#2-打印信息" class="headerlink" title="2. 打印信息"></a>2. 打印信息</h2><h3 id="2-1-普通消息-log"><a href="#2-1-普通消息-log" class="headerlink" title="2.1 普通消息 log"></a>2.1 普通消息 <code>log</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;console.log&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这个就是平时用的最多的了。</p><h3 id="2-2-信息-info"><a href="#2-2-信息-info" class="headerlink" title="2.2 信息 info"></a>2.2 信息 <code>info</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;console.info&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>console.info</code> 和 <code>console.log</code> 差不多，在谷歌浏览器里面几乎是一样的，在 <code>Safari</code> 浏览器会有些区别：</p><p><img src="/img/js/js11.jpg" alt="谷歌浏览器中"></p><p>在 <code>Safari</code> 浏览器中 <code>console.info</code> 打印出来的前面有个感叹号,就是样式不一样，便于开发者去做一个区分。</p><p><img src="/img/js/js12.jpg" alt="Safari浏览器中"></p><h3 id="2-3-表格-table"><a href="#2-3-表格-table" class="headerlink" title="2.3 表格 table"></a>2.3 表格 <code>table</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>([<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>  &#125;, &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span><br>  &#125;<br>])<br></code></pre></td></tr></table></figure><p><img src="/img/js/js13.jpg" alt="console.table()"></p><p>结果将会打印出一个 <strong>表格</strong>，和 <strong>Array</strong> 详情数据。如果是用 <code>console.log</code> 的话，就只有下面那部分的详情数据。</p><p>点击表格某列的 title 还可以进行排序。</p><h3 id="2-4-分组-group"><a href="#2-4-分组-group" class="headerlink" title="2.4 分组 group"></a>2.4 分组 <code>group</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> label = <span class="hljs-string">&#x27;Package elephant&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">group</span>(label); <span class="hljs-comment">// 默认展开</span><br><span class="hljs-comment">// console.groupCollapsed(label); // 默认折叠</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Open box&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Change value&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Close box&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupEnd</span>(label);<br></code></pre></td></tr></table></figure><p><img src="/img/js/js14.jpg" alt="分组"></p><h3 id="2-5-对象结构-dir"><a href="#2-5-对象结构-dir" class="headerlink" title="2.5 对象结构 dir"></a>2.5 对象结构 <code>dir</code></h3><p>假如要打印一个 dom 对象。</p><p>使用 <code>console.log(document.body)</code> ，展现的是<strong>元素结构</strong>:</p><p><img src="/img/js/js15.jpg" alt="元素结构"></p><p>而使用 <code>console.dir(document.body)</code>，展现的是<strong>对象结构</strong>：</p><p><img src="/img/js/js20.jpg" alt="对象结构"></p><h3 id="2-6-计时-loop"><a href="#2-6-计时-loop" class="headerlink" title="2.6 计时 loop"></a>2.6 计时 <code>loop</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;loop&#x27;</span>); <span class="hljs-comment">// 计时开始</span><br><span class="hljs-keyword">const</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - start &lt; <span class="hljs-number">10</span>) &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;loop&#x27;</span>); <span class="hljs-comment">// 计时结束</span><br></code></pre></td></tr></table></figure><p><img src="/img/js/js16.jpg" alt="计时"></p><p>适用于比较某段代码的耗时时间。开始和结束计时的 <code>loop</code> 标签可以随便取名，但是开始和结束要一致。</p><h3 id="2-7-计数-count"><a href="#2-7-计数-count" class="headerlink" title="2.7 计数 count"></a>2.7 计数 <code>count</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - start &lt; <span class="hljs-number">5</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">&#x27;count&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 计数清零，传参是要清零的标签。这里表示将 &#x27;count&#x27; 标签的计数清零</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">countReset</span>(<span class="hljs-string">&#x27;count&#x27;</span>);<br></code></pre></td></tr></table></figure><p>这个就适合判读某个代码运行了多少次，就可以用这个方法。</p><h3 id="2-8-堆栈-trace"><a href="#2-8-堆栈-trace" class="headerlink" title="2.8 堆栈 trace"></a>2.8 堆栈 <code>trace</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">trace</span>(); <span class="hljs-comment">// 表示代码运行到这里时，它调用的堆栈信息</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">b</span>();<br>&#125;<br><br><span class="hljs-title function_">a</span>();<br></code></pre></td></tr></table></figure><p><img src="/img/js/js17.jpg" alt="堆栈"></p><h3 id="2-9-断言-assert"><a href="#2-9-断言-assert" class="headerlink" title="2.9 断言 assert"></a>2.9 断言 <code>assert</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 结果为真，测试通过，控制台不会显示任务东西</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">assert</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span> === <span class="hljs-number">2</span>); <br><br><span class="hljs-comment">// 结果为假，测试不通过，控制台就会有报错信息</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">assert</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span> === <span class="hljs-number">3</span>); <br></code></pre></td></tr></table></figure><p><img src="/img/js/js18.jpg" alt="断言"></p><h2 id="3-警告-warn"><a href="#3-警告-warn" class="headerlink" title="3 警告 warn"></a>3 警告 <code>warn</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;警告：这里建议使用单引号。&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这个一般是写<strong>框架</strong>或者写<strong>库</strong>的时候用的比较多，比如某些地方使用了不合适的方法，就可以抛出一个警告。</p><h2 id="4-错误-error"><a href="#4-错误-error" class="headerlink" title="4 错误 error"></a>4 错误 <code>error</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;错误！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这个一般也是写<strong>框架</strong>或者写<strong>库</strong>的时候用的比较多，比如在使用框架的时候，有一个严重错误的用法，就可以抛出一个错误。</p><h2 id="5-清空消息-clear"><a href="#5-清空消息-clear" class="headerlink" title="5 清空消息 clear"></a>5 清空消息 <code>clear</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">clear</span>(); <span class="hljs-comment">// 将之前的打印清空</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><h2 id="6-给消息添加样式"><a href="#6-给消息添加样式" class="headerlink" title="6 给消息添加样式"></a>6 给消息添加样式</h2><p>可以像写 <code>css</code> 一样给一个打印出来的字符串标注一些样式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义样式</span><br><span class="hljs-keyword">const</span> style = <span class="hljs-string">`</span><br><span class="hljs-string">padding: 5px;</span><br><span class="hljs-string">background-color: #90442E;</span><br><span class="hljs-string">color: white;</span><br><span class="hljs-string">font-size: 18px;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;%c这是一个有样式的字符串&#x27;</span>, style)<br></code></pre></td></tr></table></figure><p><img src="/img/js/js19.jpg" alt="给消息添加样式"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>console</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 学习笔记</title>
    <link href="/2022/10/05/ts/ts-learning-notes/"/>
    <url>/2022/10/05/ts/ts-learning-notes/</url>
    
    <content type="html"><![CDATA[<h2 id="安装-Typescript"><a href="#安装-Typescript" class="headerlink" title="安装 Typescript"></a>安装 Typescript</h2><p>Typescript 官网地址: <a href="https://www.typescriptlang.org/zh/">https://www.typescriptlang.org/zh/</a></p><p>使用 nvm 来管理 node 版本: <a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><p>安装 Typescript:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g typescript<br></code></pre></td></tr></table></figure><p>使用 tsc 全局命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 查看 tsc 版本<br>tsc -v<br>// 编译 ts 文件<br>tsc fileName.ts<br></code></pre></td></tr></table></figure><h2 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h2><p>Typescript 文档地址：<a href="https://www.typescriptlang.org/docs/handbook/basic-types.html#boolean">Basic Types</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">Javascript 数据类型：</a></p><p>原始数据类型(primitive values)：</p><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-attr">isDone</span>: boolean = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// 接下来来到 number，注意 es6 还支持2进制和8进制</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: number = <span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">binaryNumber</span>: number = <span class="hljs-number">0b1111</span><br><br><span class="hljs-comment">// es6新增的模版字符串也是没有问题的</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">firstName</span>: string = <span class="hljs-string">&#x27;张三&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">message</span>: string = <span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;firstName&#125;</span>, age is <span class="hljs-subst">$&#123;age&#125;</span>`</span><br><br><span class="hljs-comment">// 奇葩兄弟两，undefined 和 null</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">n</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span><br><br><span class="hljs-comment">// 注意 undefined 和 null 是所有类型的子类型。</span><br><span class="hljs-comment">// 也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: number = <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><ul><li>any 类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-attr">notSure</span>: any = <span class="hljs-number">4</span><br>notSure = <span class="hljs-string">&#x27;maybe it is a string&#x27;</span><br>notSure = <span class="hljs-string">&#x27;boolean&#x27;</span><br><span class="hljs-comment">// 在任意值上访问任何属性都是允许的：</span><br>notSure.<span class="hljs-property">myName</span><br><span class="hljs-comment">// 也允许调用任何方法：</span><br>notSure.<span class="hljs-title function_">getName</span>()<br></code></pre></td></tr></table></figure><h2 id="Array-和-Tuple-元组"><a href="#Array-和-Tuple-元组" class="headerlink" title="Array 和 Tuple(元组)"></a>Array 和 Tuple(元组)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//最简单的方法是使用「类型 + 方括号」来表示数组：</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arrOfNumbers</span>: number[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-comment">//数组的项中不允许出现其他的类型：</span><br><span class="hljs-comment">//数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：</span><br>arrOfNumbers.<span class="hljs-title function_">push</span>(<span class="hljs-number">3</span>)<br>arrOfNumbers.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;abc&#x27;</span>)<br><br><span class="hljs-comment">// 元祖的表示和数组非常类似，只不过它将类型写在了里面 这就对每一项起到了限定的作用</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">user</span>: [string, number] = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">20</span>]<br><span class="hljs-comment">//但是当我们写少一项 就会报错 同样写多一项也会有问题</span><br>user = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">true</span>]<br><br><span class="hljs-comment">// 但是可以使用数组的 push 方法添加越界元素，但是新增的元素类型必须是元组里面定义的</span><br>user.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;李四&#x27;</span>) <span class="hljs-comment">// 不报错</span><br>use.<span class="hljs-title function_">push</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><h2 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h2><p>Typescript 文档地址：<a href="https://www.tslang.cn/docs/handbook/interfaces.html">Interface</a></p><p>TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><div class="note note-success">            <p><font size="4"> Duck Typing 概念：</font><br>如果某个东西长得像鸭子，像鸭子一样游泳，像鸭子一样嘎嘎叫，那它就可以被看成是一只鸭子。</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 我们定义了一个接口 Person</span><br>interface <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: string;<br>  <span class="hljs-attr">age</span>: number;<br>&#125;<br><span class="hljs-comment">// 接着定义了一个变量 user ，它的类型是 Person。这样，我们就约束了 user 的形状必须和接口 Person 一致。</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">user</span>: <span class="hljs-title class_">Person</span> =&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 有时我们希望不要完全匹配一个形状，那么可以用可选属性：</span><br>interface <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-attr">name</span>: string;<br>    age?: number;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">user</span>: <span class="hljs-title class_">Person</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 有时候我们希望对象中的一些字段只能在创建的时候被赋值</span><br><span class="hljs-comment">// 那么可以用 readonly 定义只读属性</span><br>interface <span class="hljs-title class_">Person</span> &#123;<br>  readonly <span class="hljs-attr">id</span>: number;<br>  <span class="hljs-attr">name</span>: string;<br>  age?: number;<br>&#125;<br>user.<span class="hljs-property">id</span> = <span class="hljs-number">9527</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Typescript 文档地址：<a href="https://www.tslang.cn/docs/handbook/functions.html">Functions</a></p><p>和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列API函数还是只使用一次的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 来到我们的第一个例子，约定输入，约定输出</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: number, y: number</span>): number &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br><br><span class="hljs-comment">// 可选参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add1</span>(<span class="hljs-params">x: number, y: number, z?: number</span>): number &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> z === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y + z<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 函数本身的类型</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">add2</span>: <span class="hljs-function">(<span class="hljs-params">x: number, y: number, z?:number</span>) =&gt;</span> number = add<br><br><span class="hljs-comment">// interface 描述函数类型</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">x: number, y: number</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br>interface <span class="hljs-title class_">ISum</span> &#123;<br>  (<span class="hljs-attr">x</span>: number, <span class="hljs-attr">y</span>: number): number<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">sum2</span>: <span class="hljs-title class_">ISum</span> = sum<br></code></pre></td></tr></table></figure><h2 id="类型推论，联合类型-和-类型断言"><a href="#类型推论，联合类型-和-类型断言" class="headerlink" title="类型推论，联合类型 和 类型断言"></a>类型推论，联合类型 和 类型断言</h2><p>Typescript 文档地址：<a href="https://www.tslang.cn/docs/handbook/type-inference.html">类型推论 - type inference</a></p><h3 id="联合类型（Union-Types）"><a href="#联合类型（Union-Types）" class="headerlink" title="联合类型（Union Types）"></a>联合类型（Union Types）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 我们只需要用中竖线来分割两个</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">numberOrString</span>: number | string <br><br><span class="hljs-comment">// 当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，</span><br><span class="hljs-comment">// 我们只能访问此联合类型的所有类型里共有的属性或方法：</span><br>numberOrString.<span class="hljs-property">length</span><br>numberOrString.<span class="hljs-title function_">toString</span>()<br></code></pre></td></tr></table></figure><h3 id="类型断言-type-assertions"><a href="#类型断言-type-assertions" class="headerlink" title="类型断言 - type assertions"></a>类型断言 - type assertions</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这里我们可以用 as 关键字，告诉typescript 编译器，</span><br><span class="hljs-comment">// 你没法判断我的代码，但是我本人很清楚，</span><br><span class="hljs-comment">// 这里我就把它看作是一个 string，你可以给他用 string 的方法。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLength</span>(<span class="hljs-params">input: string | number</span>): number &#123;<br>  <span class="hljs-keyword">const</span> str = input <span class="hljs-keyword">as</span> string<br>  <span class="hljs-keyword">if</span> (str.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-property">length</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> number = input <span class="hljs-keyword">as</span> number<br>    <span class="hljs-keyword">return</span> number.<span class="hljs-title function_">toString</span>().<span class="hljs-property">length</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型守卫-type-guard"><a href="#类型守卫-type-guard" class="headerlink" title="类型守卫 - type guard"></a>类型守卫 - type guard</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// typescript 在不同的条件分支里面，智能的缩小了范围，这样我们代码出错的几率就大大的降低了。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLength2</span>(<span class="hljs-params">input: string | number</span>): number &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> input === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> input.<span class="hljs-property">length</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> input.<span class="hljs-title function_">toString</span>().<span class="hljs-property">length</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><p>面向对象编程的三大特点:</p><ul><li><strong>封装（Encapsulation）</strong>：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，</li><li><strong>继承（Inheritance）</strong>：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性。</li><li><strong>多态（Polymorphism）</strong>：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。</li></ul><h3 id="类-Class"><a href="#类-Class" class="headerlink" title="类 - Class"></a>类 - Class</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: string;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: string</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is running`</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> snake = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;lily&#x27;</span>)<br><br><span class="hljs-comment">// 继承的特性</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>  <span class="hljs-title function_">bark</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is barking`</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> xiaobao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;xiaobao&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xiaobao.<span class="hljs-title function_">run</span>()) <span class="hljs-comment">// run xiaobao is running</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xiaobao.<span class="hljs-title function_">bark</span>()) <span class="hljs-comment">// bark xiaobao is barking</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这里我们重写构造函数，注意在子类的构造函数中，必须使用 super 调用父类的方法，要不就会报错。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(name)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">// maomao</span><br>  &#125;<br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Meow, &#x27;</span> + <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">run</span>()<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> maomao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&#x27;maomao&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(maomao.<span class="hljs-title function_">run</span>()) <span class="hljs-comment">// Meow, maomao is running</span><br></code></pre></td></tr></table></figure><h3 id="类成员的访问修饰符"><a href="#类成员的访问修饰符" class="headerlink" title="类成员的访问修饰符"></a>类成员的访问修饰符</h3><ul><li><strong>public</strong> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 public 的</li><li><strong>private</strong> 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li><li><strong>protected</strong> 修饰的属性或方法是受保护的，它和 private 类似，区别是它在子类中也是允许被访问的</li></ul><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">interface <span class="hljs-title class_">Radio</span> &#123;<br>  <span class="hljs-title function_">switchRadio</span>(<span class="hljs-attr">trigger</span>: boolean): <span class="hljs-keyword">void</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> implements <span class="hljs-title class_">Radio</span> &#123;<br>  <span class="hljs-title function_">switchRadio</span>(<span class="hljs-params">trigger</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">123</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cellphone</span> implements <span class="hljs-title class_">Radio</span> &#123;<br>  <span class="hljs-title function_">switchRadio</span>(<span class="hljs-params"></span>) &#123;<br>  &#125;<br>&#125;<br><br>interface <span class="hljs-title class_">Battery</span> &#123;<br>  <span class="hljs-title function_">checkBatteryStatus</span>(): <span class="hljs-keyword">void</span>;<br>&#125;<br><br><span class="hljs-comment">// 要实现多个接口，我们只需要中间用 逗号 隔开即可。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cellphone</span> implements <span class="hljs-title class_">Radio</span>, <span class="hljs-title class_">Battery</span> &#123;<br>  <span class="hljs-title function_">switchRadio</span>(<span class="hljs-params"></span>) &#123;<br>  &#125;<br>  <span class="hljs-title function_">checkBatteryStatus</span>(<span class="hljs-params"></span>) &#123;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="枚举-Enums"><a href="#枚举-Enums" class="headerlink" title="枚举 Enums"></a>枚举 Enums</h2><p>Typescript 文档地址：<a href="https://www.tslang.cn/docs/handbook/enums.html">Enums</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数字枚举，一个数字枚举可以用 enum 这个关键词来定义，我们定义一系列的方向，然后这里面的值，枚举成员会被赋值为从 0 开始递增的数字,</span><br>enum <span class="hljs-title class_">Direction</span> &#123;<br>  <span class="hljs-title class_">Up</span>,<br>  <span class="hljs-title class_">Down</span>,<br>  <span class="hljs-title class_">Left</span>,<br>  <span class="hljs-title class_">Right</span>,<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Direction</span>.<span class="hljs-property">Up</span>)<br><br><span class="hljs-comment">// 还有一个神奇的点是这个枚举还做了反向映射</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Direction</span>[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment">// 字符串枚举</span><br>enum <span class="hljs-title class_">Direction</span> &#123;<br>  <span class="hljs-title class_">Up</span> = <span class="hljs-string">&#x27;UP&#x27;</span>,<br>  <span class="hljs-title class_">Down</span> = <span class="hljs-string">&#x27;DOWN&#x27;</span>,<br>  <span class="hljs-title class_">Left</span> = <span class="hljs-string">&#x27;LEFT&#x27;</span>,<br>  <span class="hljs-title class_">Right</span> = <span class="hljs-string">&#x27;RIGHT&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">const</span> value = <span class="hljs-string">&#x27;UP&#x27;</span><br><span class="hljs-keyword">if</span> (value === <span class="hljs-title class_">Direction</span>.<span class="hljs-property">Up</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;go up!&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型 Generics"></a>泛型 Generics</h2><p>Typescript 文档地址：<a href="https://www.tslang.cn/docs/handbook/generics.html">Generics</a></p><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p><h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">echo</span>(<span class="hljs-params">arg</span>) &#123;<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">echo</span>(<span class="hljs-number">123</span>)<br><span class="hljs-comment">// 这时候我们发现了一个问题，我们传入了数字，但是返回了 any</span><br><br><span class="hljs-keyword">function</span> echo&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">echo</span>(<span class="hljs-number">123</span>)<br><br><span class="hljs-comment">// 泛型也可以传入多个值</span><br><span class="hljs-keyword">function</span> swap&lt;T, U&gt;(<span class="hljs-attr">tuple</span>: [T, U]): [U, T] &#123;<br>  <span class="hljs-keyword">return</span> [tuple[<span class="hljs-number">1</span>], tuple[<span class="hljs-number">0</span>]]<br>&#125;<br><br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">swap</span>([<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-number">123</span>])<br></code></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> echoWithArr&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">length</span>)<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><br><span class="hljs-comment">// 上例中，泛型 T 不一定包含属性 length，我们可以给他传入任意类型，当然有些不包括 length 属性，那样就会报错</span><br><br>interface <span class="hljs-title class_">IWithLength</span> &#123;<br>  <span class="hljs-attr">length</span>: number;<br>&#125;<br><span class="hljs-keyword">function</span> echoWithLength&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IWithLength</span>&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">length</span>)<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><br><span class="hljs-title function_">echoWithLength</span>(<span class="hljs-string">&#x27;str&#x27;</span>)<br><span class="hljs-keyword">const</span> result3 = <span class="hljs-title function_">echoWithLength</span>(&#123;<span class="hljs-attr">length</span>: <span class="hljs-number">10</span>&#125;)<br><span class="hljs-keyword">const</span> result4 = <span class="hljs-title function_">echoWithLength</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><h3 id="泛型与类和接口"><a href="#泛型与类和接口" class="headerlink" title="泛型与类和接口"></a>泛型与类和接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span> &#123;<br>  private data = [];<br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">item</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">push</span>(item)<br>  &#125;<br>  <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">shift</span>()<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>()<br>queue.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>)<br>queue.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;str&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(queue.<span class="hljs-title function_">pop</span>().<span class="hljs-title function_">toFixed</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(queue.<span class="hljs-title function_">pop</span>().<span class="hljs-title function_">toFixed</span>())<br><br><span class="hljs-comment">//在上述代码中存在一个问题，它允许你向队列中添加任何类型的数据，</span><br><span class="hljs-comment">// 当然，当数据被弹出队列时，也可以是任意类型。</span><br><span class="hljs-comment">// 在上面的示例中，看起来人们可以向队列中添加string 类型的数据，</span><br><span class="hljs-comment">// 但是那么在使用的过程中，就会出现我们无法捕捉到的错误，</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span>&lt;T&gt; &#123;<br>  private data = [];<br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">item: T</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">push</span>(item)<br>  &#125;<br>  <span class="hljs-title function_">pop</span>(): T &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">shift</span>()<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>&lt;number&gt;()<br><br><span class="hljs-comment">//泛型和 interface</span><br>interface <span class="hljs-title class_">KeyPair</span>&lt;T, U&gt; &#123;<br>  <span class="hljs-attr">key</span>: T;<br>  <span class="hljs-attr">value</span>: U;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">kp1</span>: <span class="hljs-title class_">KeyPair</span>&lt;number, string&gt; = &#123; <span class="hljs-attr">key</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;str&quot;</span>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">kp2</span>: <span class="hljs-title class_">KeyPair</span>&lt;string, number&gt; = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;str&quot;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">123</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="类型别名-和-交叉类型"><a href="#类型别名-和-交叉类型" class="headerlink" title="类型别名 和 交叉类型"></a>类型别名 和 交叉类型</h2><p>Typescript 文档地址：<a href="https://www.tslang.cn/docs/handbook/advanced-types.html">类型别名</a></p><p>类型别名，就是给类型起一个别名，让它可以更方便的被重用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-attr">sum</span>: <span class="hljs-function">(<span class="hljs-params">x: number, y: number</span>) =&gt;</span> number<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>type <span class="hljs-title class_">PlusType</span> = <span class="hljs-function">(<span class="hljs-params">x: number, y: number</span>) =&gt;</span> number<br><span class="hljs-keyword">let</span> <span class="hljs-attr">sum2</span>: <span class="hljs-title class_">PlusType</span><br><br><span class="hljs-comment">// 支持联合类型</span><br>type <span class="hljs-title class_">StrOrNumber</span> = string | number<br><span class="hljs-keyword">let</span> <span class="hljs-attr">result2</span>: <span class="hljs-title class_">StrOrNumber</span> = <span class="hljs-string">&#x27;123&#x27;</span><br>result2 = <span class="hljs-number">123</span><br><br><span class="hljs-comment">// 字符串字面量</span><br>type <span class="hljs-title class_">Directions</span> = <span class="hljs-string">&#x27;Up&#x27;</span> | <span class="hljs-string">&#x27;Down&#x27;</span> | <span class="hljs-string">&#x27;Left&#x27;</span> | <span class="hljs-string">&#x27;Right&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">toWhere</span>: <span class="hljs-title class_">Directions</span> = <span class="hljs-string">&#x27;Up&#x27;</span><br></code></pre></td></tr></table></figure><p>Typescript 文档地址：<a href="https://www.tslang.cn/docs/handbook/advanced-types.html">交叉类型</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">interface <span class="hljs-title class_">IName</span>  &#123;<br>  <span class="hljs-attr">name</span>: string<br>&#125;<br>type <span class="hljs-title class_">IPerson</span> = <span class="hljs-title class_">IName</span> &amp; &#123; <span class="hljs-attr">age</span>: number &#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">IPerson</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><p><a href="https://www.tslang.cn/docs/handbook/declaration-files/introduction.html">声明文件</a></p><p><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/">@types 官方声明文件库</a></p><p><a href="https://www.typescriptlang.org/dt/search?search=">@types 搜索声明库</a></p><h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-attr">a</span>: <span class="hljs-title class_">Array</span>&lt;number&gt; = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-comment">// 不同的文件中有多处定义，但是它们都是 内部定义的一部分，</span><br><span class="hljs-comment">// 然后根据不同的版本或者功能合并在了一起，一个interface 或者 类多次定义会合并在一起。</span><br><span class="hljs-comment">// 这些文件一般都是以 lib 开头，以 d.ts 结尾，</span><br><span class="hljs-comment">// 告诉大家，我是一个内置对象类型</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/abc/</span><br><span class="hljs-comment">// 我们还可以使用一些 build in object，内置对象，</span><br><span class="hljs-comment">// 比如 Math 与其他全局对象不同的是，Math 不是一个构造器。Math 的所有属性与方法都是静态的。</span><br><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">// DOM 和 BOM 标准对象</span><br><span class="hljs-comment">// document 对象，返回的是一个 HTMLElement</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">body</span>: <span class="hljs-title class_">HTMLElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br><span class="hljs-comment">// document 上面的query 方法，返回的是一个 nodeList 类型</span><br><span class="hljs-keyword">let</span> allLis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br><br><span class="hljs-comment">//当然添加事件也是很重要的一部分，document 上面有 addEventListener 方法，</span><br><span class="hljs-comment">// 注意这个回调函数，因为类型推断，这里面的 e 事件对象也自动获得了类型，</span><br><span class="hljs-comment">// 这里是个 mouseEvent 类型，因为点击是一个鼠标事件，</span><br><span class="hljs-comment">// 现在我们可以方便的使用 e 上面的方法和属性。</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  e.<span class="hljs-title function_">preventDefault</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>Typescript 还提供了一些功能性，帮助性的类型，这些类型，大家在 js 的世界是看不到的，这些类型叫做 utility types，提供一些简洁明快而且非常方便的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// partial，它可以把传入的类型都变成可选</span><br>interface <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-attr">name</span>: string<br>  <span class="hljs-attr">age</span>: number<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">viking</span>: <span class="hljs-title class_">IPerson</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;viking&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;<br>type <span class="hljs-title class_">IPartial</span> = <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">IPerson</span>&gt;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">viking2</span>: <span class="hljs-title class_">IPartial</span> = &#123; &#125;<br><br><span class="hljs-comment">// Omit，它返回的类型可以忽略传入类型的某个属性</span><br><br>type <span class="hljs-title class_">IOmit</span> = <span class="hljs-title class_">Omit</span>&lt;<span class="hljs-title class_">IPerson</span>, <span class="hljs-string">&#x27;name&#x27;</span>&gt;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">viking3</span>: <span class="hljs-title class_">IOmit</span> = &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>如果一个目录下存在一个 tsconfig.json 文件，那么它意味着这个目录是 TypeScript 项目的根目录。 tsconfig.json 文件中指定了用来编译这个项目的根文件和编译选项。 一个项目可以通过以下方式之一来编译：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;files&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;test.ts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;test2.d.ts&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./output&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESNext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ES5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;declaration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解析赋值、浅拷贝和深拷贝的区别</title>
    <link href="/2022/10/02/js/copy/"/>
    <url>/2022/10/02/js/copy/</url>
    
    <content type="html"><![CDATA[<h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><p>数据分为基本数据类型(<code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Null</code>, <code>Undefined</code>, <code>Symbol</code>)和对象数据类型。</p><p>基本数据类型的特点：直接存储在栈(stack)中的数据 引用数据类型的特点：存储的是该对象在栈中引用，真实的数据存放在堆内存里</p><p>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p><p><img src="/img/js/js5.jpg"></p><h2 id="二、赋值（Copy）"><a href="#二、赋值（Copy）" class="headerlink" title="二、赋值（Copy）"></a>二、赋值（Copy）</h2><p>赋值是将某一数值或对象赋给某个变量的过程，分为下面 2 部分</p><ul><li>基本数据类型：赋值，赋值之后两个变量互不影响</li><li>引用数据类型：赋址，两个变量具有相同的引用，指向同一个对象，相互之间有影响<br>对基本类型进行赋值操作，两个变量互不影响。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">let</span> b = a;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b) <span class="hljs-comment">// b 张三</span><br><br>a = <span class="hljs-string">&#x27;李四&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>,a) <span class="hljs-comment">// a 李四</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b) <span class="hljs-comment">// b 张三</span><br></code></pre></td></tr></table></figure><p>对引用类型进行赋 <strong>址</strong> 操作，两个变量指向同一个对象，改变变量 a 之后会影响变量 b，哪怕改变的只是对象 a 中的基本类型数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-string">&#x27;姓名&#x27;</span>: <span class="hljs-string">&#x27;云天河&#x27;</span>,<br>  <span class="hljs-string">&#x27;武器&#x27;</span>: &#123;<br>    <span class="hljs-string">&#x27;剑&#x27;</span>: <span class="hljs-string">&#x27;望舒剑&#x27;</span>,<br>    <span class="hljs-string">&#x27;弓&#x27;</span>: <span class="hljs-string">&#x27;射日弓&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = a;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><span class="hljs-comment">// b &#123; &#x27;姓名&#x27;: &#x27;云天河&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;望舒剑&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br><br>a[<span class="hljs-string">&#x27;姓名&#x27;</span>] = <span class="hljs-string">&#x27;慕容紫英&#x27;</span>;<br>a[<span class="hljs-string">&#x27;武器&#x27;</span>][<span class="hljs-string">&#x27;剑&#x27;</span>] = <span class="hljs-string">&#x27;剑匣&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>,a)<br><span class="hljs-comment">// a &#123; &#x27;姓名&#x27;: &#x27;慕容紫英&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;剑匣&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><span class="hljs-comment">// b &#123; &#x27;姓名&#x27;: &#x27;慕容紫英&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;剑匣&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>通常在开发中并不希望改变变量 a 之后会影响到变量 b，这时就需要用到浅拷贝和深拷贝。</p><h2 id="三、浅拷贝（Shallow-Copy）"><a href="#三、浅拷贝（Shallow-Copy）" class="headerlink" title="三、浅拷贝（Shallow Copy）"></a>三、浅拷贝（Shallow Copy）</h2><h3 id="1、什么是浅拷贝"><a href="#1、什么是浅拷贝" class="headerlink" title="1、什么是浅拷贝"></a>1、什么是浅拷贝</h3><p>创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><p><img src="/img/js/js6.jpg"></p><p>上图中，<code>SourceObject</code> 是原对象，其中包含基本类型属性 <code>field1</code> 和引用类型属性 <code>refObj</code>。浅拷贝之后基本类型数据 <code>field2</code> 和 <code>filed1</code> 是不同属性，互不影响。但引用类型 <code>refObj</code> 仍然是同一个，改变之后会对另一个对象产生影响。</p><p>简单来说可以理解为浅拷贝只解决了第一层的问题，拷贝第一层的<strong>基本类型值</strong>，以及第一层的<strong>引用类型地址</strong>。</p><h3 id="2、浅拷贝使用场景"><a href="#2、浅拷贝使用场景" class="headerlink" title="2、浅拷贝使用场景"></a>2、浅拷贝使用场景</h3><ul><li><code>Object.assign()</code></li></ul><p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-string">&#x27;姓名&#x27;</span>: <span class="hljs-string">&#x27;云天河&#x27;</span>,<br>  <span class="hljs-string">&#x27;武器&#x27;</span>: &#123;<br>    <span class="hljs-string">&#x27;剑&#x27;</span>: <span class="hljs-string">&#x27;望舒剑&#x27;</span>,<br>    <span class="hljs-string">&#x27;弓&#x27;</span>: <span class="hljs-string">&#x27;射日弓&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><span class="hljs-comment">// b &#123; &#x27;姓名&#x27;: &#x27;云天河&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;望舒剑&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br><br>a[<span class="hljs-string">&#x27;姓名&#x27;</span>] = <span class="hljs-string">&#x27;慕容紫英&#x27;</span>;<br>a[<span class="hljs-string">&#x27;武器&#x27;</span>][<span class="hljs-string">&#x27;剑&#x27;</span>] = <span class="hljs-string">&#x27;剑匣&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>,a)<br><span class="hljs-comment">// a &#123; &#x27;姓名&#x27;: &#x27;慕容紫英&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;剑匣&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><span class="hljs-comment">// b &#123; &#x27;姓名&#x27;: &#x27;云天河&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;剑匣&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>上面代码改变对象 a 之后，对象 b 的基本属性保持不变。但是当改变对象 a 中的对象 ‘武器’ 时，对象 b 相应的位置也发生了变化。</p><ul><li>展开语法 <code>Spread</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-string">&#x27;姓名&#x27;</span>: <span class="hljs-string">&#x27;云天河&#x27;</span>,<br>  <span class="hljs-string">&#x27;武器&#x27;</span>: &#123;<br>    <span class="hljs-string">&#x27;剑&#x27;</span>: <span class="hljs-string">&#x27;望舒剑&#x27;</span>,<br>    <span class="hljs-string">&#x27;弓&#x27;</span>: <span class="hljs-string">&#x27;射日弓&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = &#123;...a&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><span class="hljs-comment">// b &#123; &#x27;姓名&#x27;: &#x27;云天河&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;望舒剑&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br><br>a[<span class="hljs-string">&#x27;姓名&#x27;</span>] = <span class="hljs-string">&#x27;慕容紫英&#x27;</span>;<br>a[<span class="hljs-string">&#x27;武器&#x27;</span>][<span class="hljs-string">&#x27;剑&#x27;</span>] = <span class="hljs-string">&#x27;剑匣&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>,a)<br><span class="hljs-comment">// a &#123; &#x27;姓名&#x27;: &#x27;慕容紫英&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;剑匣&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><span class="hljs-comment">// b &#123; &#x27;姓名&#x27;: &#x27;云天河&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;剑匣&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>通过代码可以看出实际效果和 <code>Object.assign()</code> 是一样的。</p><ul><li><code>Array.prototype.slice()</code></li></ul><p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和<code> end</code>（不包括<code>end</code>）决定的原数组的浅拷贝。原始数组不会被改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;1&quot;</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]];<br><span class="hljs-keyword">let</span> b = a.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-comment">// [&quot;1&quot;, [2, 3]]</span><br><br>a[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;99&quot;</span>;<br>a[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">4</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-comment">// [0, &quot;99&quot;, [4, 3]]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-comment">//  [&quot;1&quot;, [4, 3]]</span><br></code></pre></td></tr></table></figure><p>可以看出，改变 <code>a[1]</code> 之后 <code>b[0]</code> 的值并没有发生变化，但改变 <code>a[2][0]</code> 之后，相应的 <code>b[1][0]</code> 的值也发生变化。<font color="red">说明<code> slice()</code> 方法是浅拷贝，相应的还有 <code>concat</code> 等，在工作中面对复杂数组结构要额外注意。</font></p><h2 id="四、深拷贝（Deep-Copy）"><a href="#四、深拷贝（Deep-Copy）" class="headerlink" title="四、深拷贝（Deep Copy）"></a>四、深拷贝（Deep Copy）</h2><h3 id="1、什么是深拷贝"><a href="#1、什么是深拷贝" class="headerlink" title="1、什么是深拷贝"></a>1、什么是深拷贝</h3><p>深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。拷贝前后两个对象互不影响。</p><p><img src="/img/js/js7.jpg"></p><h3 id="2、深拷贝使用场景"><a href="#2、深拷贝使用场景" class="headerlink" title="2、深拷贝使用场景"></a>2、深拷贝使用场景</h3><ul><li><code>JSON.parse(JSON.stringify(object))</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-string">&#x27;姓名&#x27;</span>: <span class="hljs-string">&#x27;云天河&#x27;</span>,<br>  <span class="hljs-string">&#x27;武器&#x27;</span>: &#123;<br>    <span class="hljs-string">&#x27;剑&#x27;</span>: <span class="hljs-string">&#x27;望舒剑&#x27;</span>,<br>    <span class="hljs-string">&#x27;弓&#x27;</span>: <span class="hljs-string">&#x27;射日弓&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(a));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><span class="hljs-comment">// b &#123; &#x27;姓名&#x27;: &#x27;云天河&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;望舒剑&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br><br>a[<span class="hljs-string">&#x27;姓名&#x27;</span>] = <span class="hljs-string">&#x27;慕容紫英&#x27;</span>;<br>a[<span class="hljs-string">&#x27;武器&#x27;</span>][<span class="hljs-string">&#x27;剑&#x27;</span>] = <span class="hljs-string">&#x27;剑匣&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>,a)<br><span class="hljs-comment">// a &#123; &#x27;姓名&#x27;: &#x27;慕容紫英&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;剑匣&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><span class="hljs-comment">// b &#123; &#x27;姓名&#x27;: &#x27;云天河&#x27;, &#x27;武器&#x27;: &#123; &#x27;剑&#x27;: &#x27;望舒剑&#x27;, &#x27;弓&#x27;: &#x27;射日弓&#x27; &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>完全改变变量 a 之后对 b 没有任何影响，这就是深拷贝的魔力。</p><p>对数组深拷贝效果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;1&quot;</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]];<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>( a.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) ));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-comment">// [&quot;1&quot;, [2, 3]]</span><br><br>a[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;99&quot;</span>;<br>a[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">4</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-comment">// [0, &quot;99&quot;, [4, 3]]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-comment">//  [&quot;1&quot;, [2, 3]]</span><br></code></pre></td></tr></table></figure><p>对数组深拷贝之后，改变原数组不会影响到拷贝之后的数组。</p><p>但是该方法有以下几个问题。</p><ol><li>会忽略 <code>undefined</code></li><li>会忽略 <code>symbol</code></li><li>不能序列化函数</li><li>不能解决循环引用的对象</li><li>不能正确处理 <code>new Date()</code></li><li>不能处理正则</li></ol><ul><li><code>undefined</code> 、<code>symbol</code> 和函数这三种情况，会直接忽略。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;张三&#x27;</span>),<br>  <span class="hljs-attr">c</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<br><span class="hljs-comment">// &#123; name: &#x27;张三&#x27;, a: undefined, b: Symbol(张三), c: [Function: c] &#125;</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-comment">// &#123; name: &#x27;张三&#x27; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>循环引用情况下，会报错。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: &#123;<br>    <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">d</span>: <span class="hljs-number">3</span><br>  &#125;<br>&#125;<br>obj.<span class="hljs-property">a</span> = obj.<span class="hljs-property">b</span>;<br>obj.<span class="hljs-property">b</span>.<span class="hljs-property">c</span> = obj.<span class="hljs-property">a</span>;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br><span class="hljs-comment">// Uncaught TypeError: Converting circular structure to JSON</span><br></code></pre></td></tr></table></figure><p><img src="/img/js/js8.jpg"></p><ul><li><code>new Date</code> 情况下，转换结果不正确。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-comment">// Mon Dec 24 2018 10:59:14 GMT+0800 (China Standard Time)</span><br><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><span class="hljs-comment">// &quot;&quot;2018-12-24T02:59:25.776Z&quot;&quot;</span><br><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br><span class="hljs-comment">// &quot;2018-12-24T02:59:41.523Z&quot;</span><br></code></pre></td></tr></table></figure><p>解决方法转成字符串或者时间戳就好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> date = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">valueOf</span>();<br><span class="hljs-comment">// 1545620645915</span><br><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(date);<br><span class="hljs-comment">// &quot;1545620673267&quot;</span><br><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(date));<br><span class="hljs-comment">// 1545620658688</span><br></code></pre></td></tr></table></figure><ul><li>正则情况下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">a</span>: <span class="hljs-regexp">/&#x27;123&#x27;/</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<br><span class="hljs-comment">// &#123;name: &quot;张三&quot;, a: /&#x27;123&#x27;/&#125;</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-comment">// &#123;name: &quot;张三&quot;, a: &#123;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><table><thead><tr><th align="center">—</th><th align="center">和原数据是否指向同一对象</th><th align="center">第一层数据为基本数据类型</th><th align="center">原数据中包含子对象</th></tr></thead><tbody><tr><td align="center">赋值</td><td align="center">是</td><td align="center">改变<font color="red"><strong>会</strong></font>使原数据一同改变</td><td align="center">改变<font color="red"><strong>会</strong></font>使原数据一同改变</td></tr><tr><td align="center">浅拷贝</td><td align="center">否</td><td align="center">改变<font color="red"><strong>不会</strong></font>使原数据一同改变</td><td align="center">改变<font color="red"><strong>会</strong></font>使原数据一同改变</td></tr><tr><td align="center">深拷贝</td><td align="center">否</td><td align="center">改变<font color="red"><strong>不会</strong></font>使原数据一同改变</td><td align="center">改变<font color="red"><strong>不会</strong></font>使原数据一同改变</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>浅拷贝</tag>
      
      <tag>深拷贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具网站</title>
    <link href="/2022/10/02/js/tools-website/"/>
    <url>/2022/10/02/js/tools-website/</url>
    
    <content type="html"><![CDATA[<h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><ul><li><a href="https://bigjpg.com/">AI 人工智能图片放大</a></li><li><a href="https://www.autodraw.com/">AutoDraw 根据手绘图生成相似的 icon 图片</a></li><li><a href="https://www.iconfont.cn/">iconfont 阿里巴巴矢量图标库</a></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li><a href="http://tools.jb51.net/regex/create_reg">正则表达式在线生成工具</a></li><li><a href="http://tools.jb51.net/regex/javascript">JavaScript 正则表达式在线测试工具</a></li></ul><h2 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h2><ul><li><a href="https://tool.chinaz.com/tools/urlencode.aspx">URL 编码&#x2F;解码</a></li><li><a href="http://www.ab173.com/">在线懒人工具</a></li><li><a href="http://json2ts.com/#">从 JSON 生成 TypeScript 接口</a></li></ul><h2 id="JS-开源工具"><a href="#JS-开源工具" class="headerlink" title="JS 开源工具"></a>JS 开源工具</h2><ul><li><a href="https://bennettfeely.com/ztext/">ztext.js</a></li></ul><div class="note note-success">            <p>ztext.js 是一个 javascript 库，可以轻松地为网页构建 3D 文本，并且可以与所有类型的字体一起使用。<br>此外，我们还可以为 SVG、图像、表情符号等其他元素创建 3D 效果。</p>          </div><ul><li><a href="https://printjs.crabbly.com/">Print.js</a></li></ul><div class="note note-success">            <p>Print.js 是一个紧凑的 Javascript 库，它允许我们直接在网页上打印文件，而无需重定向或使用嵌入。<br>它支持多种格式的打印，例如 PDF、HTML（例如表单…）、图像、JSON… 此外，它还可以在大多数流行的浏览器上运行，例如 Chrome、Firefox、Safari、Edge 和 Opera。</p>          </div><ul><li><a href="https://pqina.nl/flip/">Flip</a></li></ul><div class="note note-success">            <p>Flip 是一个插件，可让我们快速轻松地为网站创建具有翻转效果的计数器。如果我们需要创建活动计时器、促销活动或筹款活动，我认为这是最适合的库。</p>          </div><ul><li><a href="https://polypane.app/css-3d-transform-examples/">CSS 3D 变换</a></li></ul><div class="note note-success">            <p>这是使用透视属性为网页创建 3D 对象的方法的集合。这里每个代码片段旁边都有一个特定的示例。这将使我们更容易可视化受众，并查看哪些适合我们的网站。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>JavaScript</tag>
      
      <tag>JSON</tag>
      
      <tag>iconfont</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数节流和防抖</title>
    <link href="/2022/10/01/js/limit/"/>
    <url>/2022/10/01/js/limit/</url>
    
    <content type="html"><![CDATA[<p>节流函数和防抖函数在日常的开发中还是有很多地方用到，两个函数的目的都是为了控制函数被调用的频率。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:150px;line-height:150px;text-align:center; color: #fff;background-color:#ccc;font-size:80px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> content = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;content&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">count</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    content.<span class="hljs-property">innerHTML</span> = num++;</span><br><span class="language-javascript">  &#125;;</span><br><span class="language-javascript">  content.<span class="hljs-property">onmousemove</span> = count;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="防抖（debounce）函数"><a href="#防抖（debounce）函数" class="headerlink" title="防抖（debounce）函数"></a>防抖（debounce）函数</h2><div class="note note-success">            <font size="4" >  <b>    所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。  </b></font>          </div><p>防抖函数分为非立即执行版和立即执行版。</p><h3 id="非立即执行"><a href="#非立即执行" class="headerlink" title="非立即执行"></a>非立即执行</h3><p>非立即执行版的意思是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">func, wait</span>) &#123;<br>  <span class="hljs-keyword">let</span> timeout;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-variable language_">arguments</span>;<br><br>    <span class="hljs-keyword">if</span> (timeout) <span class="hljs-built_in">clearTimeout</span>(timeout);<br>    <br>    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      func.<span class="hljs-title function_">apply</span>(context, args)<br>    &#125;, wait);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用上述绑定 mousemove 事件的例子，通过上面的防抖函数，我们可以这么使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">content.<span class="hljs-property">onmousemove</span> = <span class="hljs-title function_">debounce</span>(count,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="/img/js/js1.jpg"></p><p>上述防抖函数的代码还需要注意的是 <code>this</code> 和 <code>参数</code> 的传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>;<br><span class="hljs-keyword">let</span> args = <span class="hljs-variable language_">arguments</span>;<br></code></pre></td></tr></table></figure><p>防抖函数的代码使用这两行代码来获取 <code>this</code> 和 <code>参数</code>，是为了让 <code>debounce</code> 函数最终返回的函数 <code>this</code> 指向不变以及依旧能接受到 <code>e</code> 参数。</p><h3 id="立即执行"><a href="#立即执行" class="headerlink" title="立即执行"></a>立即执行</h3><p>立即执行版的意思是触发事件后函数会立即执行，然后 n 秒内不触发事件才能继续执行函数的效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">func,wait</span>) &#123;<br>  <span class="hljs-keyword">let</span> timeout;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-variable language_">arguments</span>;<br><br>    <span class="hljs-keyword">if</span> (timeout) <span class="hljs-built_in">clearTimeout</span>(timeout);<br><br>    <span class="hljs-keyword">let</span> callNow = !timeout;<br>    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      timeout = <span class="hljs-literal">null</span>;<br>    &#125;, wait)<br><br>    <span class="hljs-keyword">if</span> (callNow) func.<span class="hljs-title function_">apply</span>(context, args)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="/img/js/js2.jpg"></p><p>在开发过程中，我们需要根据不同的场景来决定我们需要使用哪一个版本的防抖函数，一般来讲上述的防抖函数都能满足大部分的场景需求。也可以将非立即执行版和立即执行版的防抖函数结合起来。</p><h3 id="立即执行和非立即执行合并版"><a href="#立即执行和非立即执行合并版" class="headerlink" title="立即执行和非立即执行合并版"></a>立即执行和非立即执行合并版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 函数防抖</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> func 函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> wait 延迟执行毫秒数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> immediate true 表立即执行，false 表非立即执行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">func,wait,immediate</span>) &#123;<br>  <span class="hljs-keyword">let</span> timeout;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-variable language_">arguments</span>;<br><br>    <span class="hljs-keyword">if</span> (timeout) <span class="hljs-built_in">clearTimeout</span>(timeout);<br>    <span class="hljs-keyword">if</span> (immediate) &#123;<br>      <span class="hljs-keyword">var</span> callNow = !timeout;<br>      timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        timeout = <span class="hljs-literal">null</span>;<br>      &#125;, wait)<br>      <span class="hljs-keyword">if</span> (callNow) func.<span class="hljs-title function_">apply</span>(context, args)<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        func.<span class="hljs-title function_">apply</span>(context, args)<br>      &#125;, wait);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="节流（throttle）函数"><a href="#节流（throttle）函数" class="headerlink" title="节流（throttle）函数"></a>节流（throttle）函数</h2><div class="note note-success">            <font size="4" >  <b>    所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。  </b></font>          </div><p>节流，一般有两种方式可以实现，分别是时间戳版和定时器版。</p><h3 id="时间戳版"><a href="#时间戳版" class="headerlink" title="时间戳版"></a>时间戳版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">func, wait</span>) &#123;<br>  <span class="hljs-keyword">let</span> previous = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-variable language_">arguments</span>;<br>    <span class="hljs-keyword">if</span> (now - previous &gt; wait) &#123;<br>      func.<span class="hljs-title function_">apply</span>(context, args);<br>      previous = now;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br>content.<span class="hljs-property">onmousemove</span> = <span class="hljs-title function_">throttle</span>(count,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="/img/js/js3.jpg"></p><p>在持续触发事件的过程中，函数会立即执行，并且每 1s 执行一次。</p><h3 id="定时器版"><a href="#定时器版" class="headerlink" title="定时器版"></a>定时器版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">func, wait</span>) &#123;<br>  <span class="hljs-keyword">let</span> timeout;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-variable language_">arguments</span>;<br>    <span class="hljs-keyword">if</span> (!timeout) &#123;<br>      timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        timeout = <span class="hljs-literal">null</span>;<br>        func.<span class="hljs-title function_">apply</span>(context, args)<br>      &#125;, wait)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="/img/js/js4.jpg"></p><p>在持续触发事件的过程中，函数不会立即执行，并且每 1s 执行一次，在停止触发事件后，函数还会再执行一次。</p><p>时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</p><p>时间戳版和定时器版的节流函数也可以结合起来。</p><h3 id="时间戳版和定时器版结合版"><a href="#时间戳版和定时器版结合版" class="headerlink" title="时间戳版和定时器版结合版"></a>时间戳版和定时器版结合版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 函数节流</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> func 函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> wait 延迟执行毫秒数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> type 1 表时间戳版，2 表定时器版</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">func, wait ,type</span>) &#123;<br>  <span class="hljs-keyword">if</span> (type===<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">let</span> previous = <span class="hljs-number">0</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type===<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">let</span> timeout;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-variable language_">arguments</span>;<br>    <span class="hljs-keyword">if</span> (type===<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">let</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><br>      <span class="hljs-keyword">if</span> (now - previous &gt; wait) &#123;<br>        func.<span class="hljs-title function_">apply</span>(context, args);<br>        previous = now;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type===<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!timeout) &#123;<br>        timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          timeout = <span class="hljs-literal">null</span>;<br>          func.<span class="hljs-title function_">apply</span>(context, args)<br>        &#125;, wait)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>参考：<a href="https://www.jianshu.com/p/c8b86b09daf0">函数防抖和节流</a></p>          </div><h2 id="在-vue-中使用"><a href="#在-vue-中使用" class="headerlink" title="在 vue 中使用"></a>在 <code>vue</code> 中使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-comment">// 防抖 结合版</span><br>  <span class="hljs-attr">inputChange</span>: <span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>  &#125;, <span class="hljs-number">500</span>, <span class="hljs-literal">true</span>),<br>  <span class="hljs-comment">// 节流 结合版</span><br>  <span class="hljs-attr">inputChange2</span>: <span class="hljs-title function_">throttle</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>  &#125;, <span class="hljs-number">500</span>, <span class="hljs-number">1</span>),<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h2 id="在-react-中使用"><a href="#在-react-中使用" class="headerlink" title="在 react 中使用"></a>在 <code>react</code> 中使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 函数防抖</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">func,wait,immediate</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-comment">// 函数节流</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">func, wait ,type</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> inputChange = <span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>  &#125;, <span class="hljs-number">500</span>, <span class="hljs-literal">true</span>);<br><br>  <span class="hljs-keyword">const</span> inputChange1 = <span class="hljs-title function_">throttle</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>  &#125;, <span class="hljs-number">500</span>, <span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Test&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onInput</span>=<span class="hljs-string">&#123;inputChange&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onInput</span>=<span class="hljs-string">&#123;inputChange1&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Test</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>JavaScript</tag>
      
      <tag>函数节流</tag>
      
      <tag>函数防抖</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TinyMCE 切换页面(或者切换 tab 标签页)后不能正常使用</title>
    <link href="/2022/10/01/vue/plug-in/"/>
    <url>/2022/10/01/vue/plug-in/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><font size="4" color="red">TinyMCE是什么？</font><br><a href="http://tinymce.ax-z.cn/">TinyMCE</a> 是一款易用、且功能强大的所见即所得的富文本编辑器。同类程序有：UEditor、Kindeditor、Simditor、CKEditor、wangEditor、Suneditor、froala等等。</p>          </div><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p style="text-indent: 2em">当前组件被 <span  style="color: red">keep-alive</span> 缓存了的话，组件被切换出去又被切换回来，导致这个编辑器不能正常使用，页面内容被清空，而且编辑器类似于禁止填写，不能输入。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>vue 2.x + tinymce 5.3.2</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>组件缓存导致编辑器不能正常使用</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- key就是防止组件缓存导致编辑器不能正常使用，每次切换来都更改key,使其重新渲染 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">editor</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tinymceEditor&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">:init</span>=<span class="hljs-string">&quot;tinymceInit&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tinymceFlag&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tinymceContent&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">editor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Editor</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tinymce/tinymce-vue&quot;</span>;<br><br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;tinymce&quot;</span>,<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">Editor</span> &#125;,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">tinymceContent</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-attr">tinymceFlag</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">tinymceInit</span>: &#123;&#125;<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tinymceInit</span> = &#123;<br>      <span class="hljs-comment">// ...</span><br>    &#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tinymceFlag</span>++;<br>  &#125;,<br>  <span class="hljs-title function_">activated</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tinymceFlag</span>++;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>TinyMCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速删除 node_modules 文件</title>
    <link href="/2022/09/28/node/delete-node-modules/"/>
    <url>/2022/09/28/node/delete-node-modules/</url>
    
    <content type="html"><![CDATA[<p>使用 <code>npm</code> 指令构建的 <code>node_modules</code> 包，文件数量太多，导致通过系统删除太慢。</p><p>这里提供两种快速删除 <code>node_modules</code> 文件的方法。</p><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><h3 id="安装-rimraf"><a href="#安装-rimraf" class="headerlink" title="安装 rimraf:"></a>安装 <code>rimraf</code>:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i rimraf -g<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在需要删除 <code>node_modules</code> 文件的项目下，使用 <code>CMD</code> 输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rimraf node_modules<br></code></pre></td></tr></table></figure><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><h3 id="安装-remove-node-modules"><a href="#安装-remove-node-modules" class="headerlink" title="安装 remove-node-modules:"></a>安装 <code>remove-node-modules</code>:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i remove-node-modules -g<br></code></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>在需要删除 <code>node_modules</code> 文件的项目下，使用 <code>CMD</code> 输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">remove-node-modules<br></code></pre></td></tr></table></figure><div class="note note-success">            <p><font size="4">Tip</font><br>方法一的删除速度没有方法二的快；<br>方法一可以删除其他文件，方法二只能删除 <code>node_modules</code> 文件；<br>两种发放删除的文件均不能在<font color="red">回收站</font>还原；</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
      <tag>npm</tag>
      
      <tag>node_modules</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H5 页面跳转微信小程序</title>
    <link href="/2022/09/20/wx/open-tag-to-weapp/"/>
    <url>/2022/09/20/wx/open-tag-to-weapp/</url>
    
    <content type="html"><![CDATA[<p>最近有个项目需要在公众号的 H5 页面，实现一个功能：点击按钮跳转到另一个微信小程序。其中遇到了一些问题，在此记录一下。</p><div class="note note-success">            <p>项目中用的是 Vue, uniapp 应该类似的用法。</p>          </div><p>该功能是需要通过微信提供的开放标签 &lt;<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#21">wx-open-launch-weapp</a>&gt; 来实现。</p><h2 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h2><p>嗯。。。很简洁。。。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">wx-open-launch-weapp</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;launch-btn&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;gh_xxxxxxxx&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;pages/home/index?user=123&amp;action=abc&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/wxtag-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.btn</span> &#123; <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>打开小程序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">  </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wx-open-launch-weapp</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;launch-btn&#x27;</span>);</span><br><span class="language-javascript">  btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;launch&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success&#x27;</span>);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fail&#x27;</span>, e.<span class="hljs-property">detail</span>);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="开放对象（敲黑板）"><a href="#开放对象（敲黑板）" class="headerlink" title="开放对象（敲黑板）"></a>开放对象（敲黑板）</h2><p>此功能仅开放给 <strong>已认证的服务号</strong> ，服务号绑定“JS接口安全域名”下的网页可使用此标签跳转满足一定条件的App。在使用该标签之前，首先需要前往 <a href="https://open.weixin.qq.com/">微信开放平台</a> 的 <strong>管理中心 - 公众账号或小程序详情 - 接口信息 - 网页跳转移动应用 - 关联设置</strong> 中绑定所需要跳转的App。详细配置规则参考文档<a href="https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_H5_Launch_APP.html">《微信内网页跳转 APP 功能》</a>。</p><div class="note note-success">            <p>该功能是不能在本地或者微信开发者工具中测试的，所以要把项目部署到线上。<br>以下操作基于正式环境</p>          </div><h2 id="绑定安全域名"><a href="#绑定安全域名" class="headerlink" title="绑定安全域名"></a>绑定安全域名</h2><p>登录 <a href="https://mp.weixin.qq.com/">微信公众平台</a> 进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。<br><img src="/img/wx/wx1.png" alt="wx1.png"></p><h2 id="设置-IP-白名单"><a href="#设置-IP-白名单" class="headerlink" title="设置 IP 白名单"></a>设置 IP 白名单</h2><p>获取签名时，要调用“获取access_token”接口，返回结果。<br>如非白名单IP调用，将返回错误码：40164。<br>见：<a href="https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&key=1495617578&version=1&lang=zh_CN&platform=2&token=755171451">“获取access_token”接口新增IP白名单保护</a></p><p><img src="/img/wx/wx2.png" alt="wx2.png"></p><h2 id="引入JS文件"><a href="#引入JS文件" class="headerlink" title="引入JS文件"></a><span id="version-1.6">引入JS文件</span></h2><div class="note note-success">            <p>注意<br>js-sdk 的版本要在 1.6 以上</p>          </div><h3 id="通过-script-标签"><a href="#通过-script-标签" class="headerlink" title="通过 script 标签"></a>通过 <code>script</code> 标签</h3><ul><li>直接在 index.html 中引用：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://res.wx.qq.com/open/js/jweixin-1.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="通过-npm"><a href="#通过-npm" class="headerlink" title="通过 npm"></a>通过 npm</h3><ul><li>直接在项目中安装相关版本的依赖：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install weixin-js-sdk<br></code></pre></td></tr></table></figure><ul><li>在项目页面引用：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> wx <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;weixin-js-sdk&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="忽略自定义标签"><a href="#忽略自定义标签" class="headerlink" title="忽略自定义标签"></a><span id="ignore-open-tag">忽略自定义标签</span></h2><p><code>wx-open-launch-weapp</code> 不是一个标准的 <code>html</code> 标签，直接使用虽然也可以但是 <code>vue</code> 会在 <code>console</code> 输出一大堆warn。</p><p>所以要在 main.js 文件中忽略该标签：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 如果用到其他开放标签，就往里加</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">ignoredElements</span> = [<span class="hljs-string">&#x27;wx-open-launch-weapp&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="通过-config-接口注入权限验证配置并申请所需开放标签"><a href="#通过-config-接口注入权限验证配置并申请所需开放标签" class="headerlink" title="通过 config 接口注入权限验证配置并申请所需开放标签"></a>通过 config 接口注入权限验证配置并申请所需开放标签</h2><p>与使用 JS-SDK 配置方式相同，所有需要使用开放标签的页面必须先注入配置信息，并通过 <font color="red">openTagList</font> 字段申请所需要的开放标签，否则将无法使用（同一个 url 仅需调用一次）。开放标签的申请和 JS 接口的申请相互独立，因此是可以同时申请的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-title function_">config</span>(&#123;<br>  <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启调试模式,调用的所有 api 的返回值会在客户端 alert 出来，若要查看传入的参数，可以在 pc 端打开，参数信息会通过 log 打出，仅在 pc 端时才会打印</span><br>  <span class="hljs-attr">appId</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 必填，公众号的唯一标识</span><br>  <span class="hljs-attr">timestamp</span>: , <span class="hljs-comment">// 必填，生成签名的时间戳</span><br>  <span class="hljs-attr">nonceStr</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 必填，生成签名的随机串</span><br>  <span class="hljs-attr">signature</span>: <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 必填，签名</span><br>  <span class="hljs-attr">jsApiList</span>: [], <span class="hljs-comment">// 必填，需要使用的 JS 接口列表</span><br>  <span class="hljs-attr">openTagList</span>: [] <span class="hljs-comment">// 可选，需要使用的开放标签列表，例如[&#x27;wx-open-launch-app&#x27;]</span><br>&#125;);<br></code></pre></td></tr></table></figure><div class="note note-success">            <p><font size="4"><strong>Tip:</strong></font><br>其中 <code>timestamp</code>, <code>nonceStr</code>, <code>signature</code> 由后端生成；<br>签名算法见：<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#62"><font color="#0366D6">JS-SDK使用权限签名算法</font></a>；<br><code>jsApiList</code> 必填，如果项目没有用到，可以随便填一个 <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#63"><font color="#0366D6">(JS 接口列表)</font></a>；<br><code>openTagList</code> 必填，用到了就填上去，但是用了那些就要 main.js 里面去配置 <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html#%E9%99%84%E5%BD%95-%E6%89%80%E6%9C%89%E5%BC%80%E6%94%BE%E6%A0%87%E7%AD%BE%E5%88%97%E8%A1%A8"><font color="#0366D6">(开放标签)</font></a>；</p>          </div><h2 id="通过-ready-接口处理成功验证"><a href="#通过-ready-接口处理成功验证" class="headerlink" title="通过 ready 接口处理成功验证"></a>通过 ready 接口处理成功验证</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * config信息验证后会执行 ready 方法，</span><br><span class="hljs-comment"> * 所有接口调用都必须在 config 接口获得结果之后，</span><br><span class="hljs-comment"> * config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，</span><br><span class="hljs-comment"> * 则须把相关接口放在 ready 函数中调用来确保正确执行。</span><br><span class="hljs-comment"> * 对于用户触发时才调用的接口，则可以直接调用，不需要放在 ready 函数中</span><br><span class="hljs-comment"> */</span><br>wx.<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="通过-error-接口处理失败验证"><a href="#通过-error-接口处理失败验证" class="headerlink" title="通过 error 接口处理失败验证"></a>通过 error 接口处理失败验证</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * config信息验证失败会执行 error 函数，</span><br><span class="hljs-comment"> * 如签名过期导致验证失败，</span><br><span class="hljs-comment"> * 具体错误信息可以打开 config 的debug模式查看，</span><br><span class="hljs-comment"> * 也可以在返回的 res 参数中查看，</span><br><span class="hljs-comment"> * 对于 SPA 可以在这里更新签名</span><br><span class="hljs-comment"> */</span><br>wx.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="容易踩坑的点"><a href="#容易踩坑的点" class="headerlink" title="容易踩坑的点"></a>容易踩坑的点</h2><ul><li><a href="#version-1.6">JS-SDK 的版本要在 1.6.0 以上的版本；</a></li><li><a href="#ignore-open-tag">要忽略自定义标签；</a></li><li>开放标签在开发环境（微信开发者工具）上不会显示按钮；</li></ul>]]></content>
    
    
    <categories>
      
      <category>微信</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>微信</tag>
      
      <tag>H5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用正则表达式</title>
    <link href="/2022/09/19/js/jegexp-common/"/>
    <url>/2022/09/19/js/jegexp-common/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><font size="5">推荐 <code>VS Code</code> 正则表达式插件</font><br><strong>名字</strong>：any-rule<br><strong>插件ID</strong>：russell.any-rule<br><strong>使用</strong>：安装后，鼠标右键点击然后选择一个正则表达式，点击即可。可根据需求搜索。</p>          </div><h3 id="必须带端口号的网址-或IP"><a href="#必须带端口号的网址-或IP" class="headerlink" title="必须带端口号的网址(或IP)"></a>必须带端口号的网址(或IP)</h3><p>例如: <a href="https://www.qq.com:8080/">https://www.qq.com:8080</a> 或 127.0.0.1:5050 或 baidu.com:8001 或 <a href="http://192.168.1.1:9090/">http://192.168.1.1:9090</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^((ht|f)tps?:\/\/)?[\w-]+(\.[\w-]+)+:\d&#123;<span class="hljs-number">1</span>,<span class="hljs-number">5</span>&#125;\/?$/<br></code></pre></td></tr></table></figure><h3 id="网址（URL）"><a href="#网址（URL）" class="headerlink" title="网址（URL）"></a>网址（URL）</h3><p>例如: <a href="http://www.qq.com/">www.qq.com</a> 或 https:&#x2F; &#x2F;vuejs.org&#x2F;v2&#x2F;api&#x2F;#v-model 或 <a href="http://www.qq.99/">www.qq.99</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(((ht|f)tps?):\/\/)?([^!@#$%^&amp;*?.\s-]([^!@#$%^&amp;*?.\s]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">63</span>&#125;[^!@#$%^&amp;*?.\s])?\.)+[a-z]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>&#125;\/?/<br></code></pre></td></tr></table></figure><h3 id="社会信用代码"><a href="#社会信用代码" class="headerlink" title="社会信用代码"></a>社会信用代码</h3><h4 id="严格匹配"><a href="#严格匹配" class="headerlink" title="严格匹配"></a>严格匹配</h4><p>例如: 91230184MA1BUFLT44 或 9237100OMA3MXHOE3w</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^[<span class="hljs-number">0</span>-9A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NPQRTUWXY</span>]&#123;<span class="hljs-number">2</span>&#125;\d&#123;<span class="hljs-number">6</span>&#125;[<span class="hljs-number">0</span>-9A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NPQRTUWXY</span>]&#123;<span class="hljs-number">10</span>&#125;$/<br></code></pre></td></tr></table></figure><h4 id="宽松匹配（15-x2F-18-x2F-20位数字-x2F-字母）"><a href="#宽松匹配（15-x2F-18-x2F-20位数字-x2F-字母）" class="headerlink" title="宽松匹配（15&#x2F;18&#x2F;20位数字&#x2F;字母）"></a>宽松匹配（15&#x2F;18&#x2F;20位数字&#x2F;字母）</h4><p>例如: 91110108772551611」或 911101085923662400</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^[<span class="hljs-number">0</span>-9A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NPQRTUWXY</span>]&#123;<span class="hljs-number">2</span>&#125;\d&#123;<span class="hljs-number">6</span>&#125;[<span class="hljs-number">0</span>-9A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NPQRTUWXY</span>]&#123;<span class="hljs-number">10</span>&#125;$/<br></code></pre></td></tr></table></figure><h3 id="子网掩码-不包含0-0-0-0"><a href="#子网掩码-不包含0-0-0-0" class="headerlink" title="子网掩码(不包含0.0.0.0)"></a>子网掩码(不包含0.0.0.0)</h3><p>例如: 255.255.255.0 或 255.255.255.255 或 255.240.0.0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(<span class="hljs-number">254</span>|<span class="hljs-number">252</span>|<span class="hljs-number">248</span>|<span class="hljs-number">240</span>|<span class="hljs-number">224</span>|<span class="hljs-number">192</span>|<span class="hljs-number">128</span>)\<span class="hljs-number">.0</span>\<span class="hljs-number">.0</span>\<span class="hljs-number">.0</span>|<span class="hljs-number">255</span>\.(<span class="hljs-number">254</span>|<span class="hljs-number">252</span>|<span class="hljs-number">248</span>|<span class="hljs-number">240</span>|<span class="hljs-number">224</span>|<span class="hljs-number">192</span>|<span class="hljs-number">128</span>|<span class="hljs-number">0</span>)\<span class="hljs-number">.0</span>\<span class="hljs-number">.0</span>|<span class="hljs-number">255</span>\<span class="hljs-number">.255</span>\.(<span class="hljs-number">254</span>|<span class="hljs-number">252</span>|<span class="hljs-number">248</span>|<span class="hljs-number">240</span>|<span class="hljs-number">224</span>|<span class="hljs-number">192</span>|<span class="hljs-number">128</span>|<span class="hljs-number">0</span>)\<span class="hljs-number">.0</span>|<span class="hljs-number">255</span>\<span class="hljs-number">.255</span>\<span class="hljs-number">.255</span>\.(<span class="hljs-number">255</span>|<span class="hljs-number">254</span>|<span class="hljs-number">252</span>|<span class="hljs-number">248</span>|<span class="hljs-number">240</span>|<span class="hljs-number">224</span>|<span class="hljs-number">192</span>|<span class="hljs-number">128</span>|<span class="hljs-number">0</span>)$/<br></code></pre></td></tr></table></figure><h3 id="考卷分数"><a href="#考卷分数" class="headerlink" title="考卷分数"></a>考卷分数</h3><p>大于等于0, 小于等于150, 支持小数位出现5, 如145.5</p><p>例如: 150 或 100.5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^<span class="hljs-number">150</span>$|^(?:\d|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d|<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)(?:\<span class="hljs-number">.5</span>)?$/<br></code></pre></td></tr></table></figure><h3 id="版本号-version-格式必须为X-Y-Z"><a href="#版本号-version-格式必须为X-Y-Z" class="headerlink" title="版本号(version)格式必须为X.Y.Z"></a>版本号(version)格式必须为X.Y.Z</h3><p>例如: 16.3.10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^\d+(?:\.\d+)&#123;<span class="hljs-number">2</span>&#125;$/<br></code></pre></td></tr></table></figure><h3 id="图片-image-链接地址"><a href="#图片-image-链接地址" class="headerlink" title="图片(image)链接地址"></a>图片(image)链接地址</h3><p>图片格式可按需增删</p><p>例如: <a href="https://www.abc.com/logo.png">https://www.abc.com/logo.png</a> 或 <a href="http://www.abc.com/logo.png">http://www.abc.com/logo.png</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^https?:\/\/(.+\/)+.+(\.(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif))$/i<br></code></pre></td></tr></table></figure><h3 id="银行卡号-10到30位-覆盖对公-x2F-私账户"><a href="#银行卡号-10到30位-覆盖对公-x2F-私账户" class="headerlink" title="银行卡号(10到30位,覆盖对公&#x2F;私账户"></a>银行卡号(10到30位,覆盖对公&#x2F;私账户</h3><p>例如: 6234567890 或 6222026006705354000</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d&#123;<span class="hljs-number">9</span>,<span class="hljs-number">29</span>&#125;$/<br></code></pre></td></tr></table></figure><h3 id="中文姓名"><a href="#中文姓名" class="headerlink" title="中文姓名"></a>中文姓名</h3><p>例如: 葛二蛋 或 凯文·杜兰特 或 德克·维尔纳·诺维茨基</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(?:[\u4e00-\u9fa5·]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">16</span>&#125;)$/<br></code></pre></td></tr></table></figure><h3 id="车牌号"><a href="#车牌号" class="headerlink" title="车牌号"></a>车牌号</h3><h4 id="新能源"><a href="#新能源" class="headerlink" title="新能源"></a>新能源</h4><p>例如: 京AD92035 或 甘G23459F 或 京AA92035</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-Z](?:((\d&#123;<span class="hljs-number">5</span>&#125;[A-<span class="hljs-variable constant_">HJK</span>])|([A-<span class="hljs-variable constant_">HJK</span>][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]&#123;<span class="hljs-number">4</span>&#125;))|[A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]&#123;<span class="hljs-number">4</span>&#125;[A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>挂学警港澳])$/<br></code></pre></td></tr></table></figure><h4 id="非新能源"><a href="#非新能源" class="headerlink" title="非新能源"></a>非新能源</h4><p>例如: 京A00599 或 黑D23908</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-Z][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]&#123;<span class="hljs-number">4</span>&#125;[A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>挂学警港澳]$/<br></code></pre></td></tr></table></figure><h4 id="新能源-非新能源"><a href="#新能源-非新能源" class="headerlink" title="新能源+非新能源"></a>新能源+非新能源</h4><p>例如: 京A00599 或 京AD92035</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-Z][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;[A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>挂学警港澳]$/<br></code></pre></td></tr></table></figure><h3 id="手机号-mobile-phone-中国"><a href="#手机号-mobile-phone-中国" class="headerlink" title="手机号(mobile phone)中国"></a>手机号(mobile phone)中国</h3><h4 id="严谨"><a href="#严谨" class="headerlink" title="严谨"></a>严谨</h4><p>根据工信部2019年最新公布的手机号段。</p><p>例如: 008618311006933 或 +8617888829981 或 19119255642</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(?:(?:\+|<span class="hljs-number">00</span>)<span class="hljs-number">86</span>)?<span class="hljs-number">1</span>(?:(?:<span class="hljs-number">3</span>[\d])|(?:<span class="hljs-number">4</span>[<span class="hljs-number">5</span>-<span class="hljs-number">79</span>])|(?:<span class="hljs-number">5</span>[<span class="hljs-number">0</span>-<span class="hljs-number">35</span>-<span class="hljs-number">9</span>])|(?:<span class="hljs-number">6</span>[<span class="hljs-number">5</span>-<span class="hljs-number">7</span>])|(?:<span class="hljs-number">7</span>[<span class="hljs-number">0</span>-<span class="hljs-number">8</span>])|(?:<span class="hljs-number">8</span>[\d])|(?:<span class="hljs-number">9</span>[<span class="hljs-number">189</span>]))\d&#123;<span class="hljs-number">8</span>&#125;$/<br></code></pre></td></tr></table></figure><h4 id="宽松"><a href="#宽松" class="headerlink" title="宽松"></a>宽松</h4><p>只要是13,14,15,16,17,18,19开头即可</p><p>例如: 008618311006933 或 +8617888829981 或 19119255642</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(?:(?:\+|<span class="hljs-number">00</span>)<span class="hljs-number">86</span>)?<span class="hljs-number">1</span>[<span class="hljs-number">3</span>-<span class="hljs-number">9</span>]\d&#123;<span class="hljs-number">9</span>&#125;$/<br></code></pre></td></tr></table></figure><h4 id="最宽松"><a href="#最宽松" class="headerlink" title="最宽松"></a>最宽松</h4><p>只要是1开头即可</p><p>例如: 008618311006933 或 +8617888829981 或 19119255642</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(?:(?:\+|<span class="hljs-number">00</span>)<span class="hljs-number">86</span>)?<span class="hljs-number">1</span>\d&#123;<span class="hljs-number">10</span>&#125;$/<br></code></pre></td></tr></table></figure><h3 id="email-邮箱"><a href="#email-邮箱" class="headerlink" title="email(邮箱)"></a>email(邮箱)</h3><p>例如: <a href="mailto:&#57;&#x30;&#x32;&#x30;&#51;&#x39;&#x31;&#x38;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#57;&#x30;&#x32;&#x30;&#51;&#x39;&#x31;&#x38;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a> 或<a href="mailto:&#110;&#98;&#x69;&#x6c;&#x6c;&#x79;&#x40;&#x31;&#x32;&#54;&#x2e;&#x63;&#x6f;&#109;">&#110;&#98;&#x69;&#x6c;&#x6c;&#x79;&#x40;&#x31;&#x32;&#54;&#x2e;&#x63;&#x6f;&#109;</a>或汉字@qq.com</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(([^<span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>()[\]\\.,;:\s@&quot;]+(\.[^<span class="hljs-tag">&lt;&gt;</span>()[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span><br></code></pre></td></tr></table></figure><h3 id="座机-tel-phone-电话-国内"><a href="#座机-tel-phone-电话-国内" class="headerlink" title="座机(tel phone)电话(国内)"></a>座机(tel phone)电话(国内)</h3><p>例如: 0936-4211235 或 89076543 或 010-12345678-1234</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(?:(?:\d&#123;<span class="hljs-number">3</span>&#125;-)?\d&#123;<span class="hljs-number">8</span>&#125;|^(?:\d&#123;<span class="hljs-number">4</span>&#125;-)?\d&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;)(?:-\d+)?$/<br></code></pre></td></tr></table></figure><h3 id="身份证号-支持1-x2F-2代-15位-x2F-18位数字"><a href="#身份证号-支持1-x2F-2代-15位-x2F-18位数字" class="headerlink" title="身份证号, 支持1&#x2F;2代(15位&#x2F;18位数字)"></a>身份证号, 支持1&#x2F;2代(15位&#x2F;18位数字)</h3><p>例如: 622223199912051311 或 12345619991205131x 或 123456991010193</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d&#123;<span class="hljs-number">7</span>&#125;(?:<span class="hljs-number">0</span>\d|<span class="hljs-number">10</span>|<span class="hljs-number">11</span>|<span class="hljs-number">12</span>)(?:<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">1</span>-<span class="hljs-number">2</span>][\d]|<span class="hljs-number">30</span>|<span class="hljs-number">31</span>)\d&#123;<span class="hljs-number">3</span>&#125;$/<br></code></pre></td></tr></table></figure><h3 id="密码强度校验"><a href="#密码强度校验" class="headerlink" title="密码强度校验"></a>密码强度校验</h3><ul><li>最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</li></ul><p>例如: Kd@curry666</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^\S*(?=\S&#123;<span class="hljs-number">6</span>,&#125;)(?=\S*\d)(?=\S*[A-Z])(?=\S*[a-z])(?=\S*[!@#$%^&amp;*? ])\S*$/<br></code></pre></td></tr></table></figure><ul><li>大写字母，小写字母，数字，特殊符号 <font color='red'>@#$%个&amp;*`~(-+&#x3D;&#96;</font> 中任意3项密码</li></ul><p>例如: a1@ 或 A1@ 或 Aa@</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(?![a-zA-Z]+$)(?![A-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]+$)(?![A-Z\<span class="hljs-variable constant_">W_</span>!@#$%^&amp;*<span class="hljs-string">`~()-+=]+$)(?![a-z0-9]+$)(?![a-z\W_!@#$%^&amp;*`</span>~()-+=]+$)(?![<span class="hljs-number">0</span>-<span class="hljs-number">9</span>\<span class="hljs-variable constant_">W_</span>!@#$%^&amp;*<span class="hljs-string">`~()-+=]+$)[a-zA-Z0-9\W_!@#$%^&amp;*`</span>~()-+=]/<br></code></pre></td></tr></table></figure><h3 id="正整数，不包含0"><a href="#正整数，不包含0" class="headerlink" title="正整数，不包含0"></a>正整数，不包含0</h3><p>例如: 1231</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^\+?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*$/<br></code></pre></td></tr></table></figure><h3 id="负整数，不包含0"><a href="#负整数，不包含0" class="headerlink" title="负整数，不包含0"></a>负整数，不包含0</h3><p>例如: -1231</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^-[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*$/<br></code></pre></td></tr></table></figure><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>例如: -1231 或 123</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^-?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*$/<br></code></pre></td></tr></table></figure><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>例如: 1.23 或 -1.01 或 0.00</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(-?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*\.\d+|-?<span class="hljs-number">0</span>\.\d*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*|<span class="hljs-number">0</span>\<span class="hljs-number">.0</span>+)$/<br></code></pre></td></tr></table></figure><h3 id="浮点数-严格"><a href="#浮点数-严格" class="headerlink" title="浮点数(严格)"></a>浮点数(严格)</h3><p>例如: 1.23 或 -1.01</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/^(-?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*\.\d+|-?<span class="hljs-number">0</span>\.\d*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>])$/<br></code></pre></td></tr></table></figure><h3 id="正数（大于零，最多可保留2位小数）"><a href="#正数（大于零，最多可保留2位小数）" class="headerlink" title="正数（大于零，最多可保留2位小数）"></a>正数（大于零，最多可保留2位小数）</h3><p>例如：1 或 1.2 或 1.23</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/(?:^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)?(?:\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;)?$)|(?:^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>](?:[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])?$)/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 小技巧</title>
    <link href="/2022/09/19/vue/vue-tips/"/>
    <url>/2022/09/19/vue/vue-tips/</url>
    
    <content type="html"><![CDATA[<h3 id="1-路由懒加载"><a href="#1-路由懒加载" class="headerlink" title="1. 路由懒加载"></a>1. 路由懒加载</h3><p><font color="red">说明：</font>路由懒加载可以让我们的包不需要一次把所有的页面的加载进来，只加载当前页面的路由组件就行。<br>​<font color="red">举例：</font>如果这样写，加载的时候会全部都加载进来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>:[<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;,&#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>所以，应该避免上面的写法，尽量使用懒加载。<br>​懒加载写法：结合 <font color="red">webpack</font> 的 <font color="red">import</font> 使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>:[<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;home&quot; */</span> <span class="hljs-string">&#x27;../views/Home.vue&#x27;</span>)<br>    &#125;, &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/About.vue&#x27;</span>)<br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><hr><h3 id="2-Object-freeze方法"><a href="#2-Object-freeze方法" class="headerlink" title="2. Object.freeze方法"></a>2. <font color="red">Object.freeze</font>方法</h3><p>​ <font color="red">说明：</font>vue初始化的时候会将data里面的数据都搞成响应式数据。但是，我们在写业务逻辑的时候会有些数据一初始化就永远不会改变，它根本就不需要被vue做成响应式数据，因此我们应该将这些不用改变的数据通过Object.freeze方法冻结它，避免vue初始化的时候，做一些无用的操作。<br>​ <font color="red">get：</font><font color="red">Object.freeze() </font>方法可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。该方法返回被冻结的对象。对于data或vuex里使用freeze冻结了的对象，vue不会做getter和setter的转换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">data</span>:<span class="hljs-function">()=&gt;</span>(&#123;<br>    <span class="hljs-attr">list</span>:<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>([&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;我永远不需要改变，我不需要响应式&#x27;</span>&#125;])<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>个人理解：这个方法平时在项目可以使用，如某些固定的标题、按钮文字、渲染大量的固定数据列表等。</p><hr><h3 id="3-异步组件"><a href="#3-异步组件" class="headerlink" title="3. 异步组件"></a>3. 异步组件</h3><p>​ <font color="red">说明：</font>异步组件可以让我们在需要一些组件时才将它加载进来，而不是一初始化就加载进来，这跟路由懒加载时一个概念。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 简单写法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>:&#123;<br>    <span class="hljs-title class_">AsyncComponent</span>:<span class="hljs-function">()=&gt;</span><span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;AsyncComponent&quot; */</span> <span class="hljs-string">&#x27;./Async&#x27;</span>)<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 完善写法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>:&#123;<br>    <span class="hljs-title class_">AsyncComponent</span>:<span class="hljs-function">()=&gt;</span>(&#123;<br>      <span class="hljs-attr">component</span>:<span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;AsyncComponent&quot; */</span> <span class="hljs-string">&#x27;./Async&#x27;</span>),<br>      <span class="hljs-attr">delay</span>:<span class="hljs-number">200</span>, <span class="hljs-comment">// 延迟几毫秒，默认200</span><br>      <span class="hljs-attr">timeout</span>:<span class="hljs-number">3000</span>, <span class="hljs-comment">// 加载几毫秒之后就超时，触发error组件</span><br>      <span class="hljs-attr">loading</span>:<span class="hljs-title class_">LoadingComponent</span>, <span class="hljs-comment">// 组件未加载回来前显示</span><br>      <span class="hljs-attr">error</span>:<span class="hljs-title class_">ErrorComponent</span> <span class="hljs-comment">// 组件超时时显示</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​ <font color="red">个人理解：</font>异步组件的完善写法，相对来说更加人性化，也能给用户更好的使用体验，在一些ui框架中应该就使用了这种方式吧。</p><hr><h3 id="4-computed中使用this？"><a href="#4-computed中使用this？" class="headerlink" title="4.  computed中使用this？"></a>4.  computed中使用this？</h3><p>​ <font color="red">说明：</font>在<code>computed</code>属性中通过<code>this.xxx</code>去拿<code>data</code>里面的数据，和methods里面的方法，或许还会通过<code>this.route</code>去获取路由里面的数据。其实可以避免这些丑陋的<code>this</code>，它甚至会给我们带来看不见的性能问题。实现上，我们通过<code>this</code>能访问到的数据，在<code>computed</code>的第一个参数上都能结构出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>   <span class="hljs-title function_">haha</span>(<span class="hljs-params">&#123;$attrs,$route,$store,$listeners,$ref&#125;</span>)&#123;<br>     <span class="hljs-comment">// 还能结构很多属性</span><br>     <span class="hljs-keyword">return</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​ <font color="red">个人理解：</font>这是一个很不错的知识，在之前我也是通过 <code>this.xxx</code> 去获取想要的数据或者方法。学到了，学到了！！！</p><hr><h3 id="5-避免v-if和v-for一起使用"><a href="#5-避免v-if和v-for一起使用" class="headerlink" title="5. 避免v-if和v-for一起使用"></a>5. 避免v-if和v-for一起使用</h3><p>​ <font color="red">说明：</font>从vue官网上就明确说明：<strong>不推荐</strong>在同一元素上使用 <code>v-if</code> 和 <code>v-for</code>。<br>​ 在<code>vue</code>的源码中有一段代码时对指令的优先级的处理，这段代码是先处理<code>v-for</code>再处理<code>v-if</code>的。所以如果我们在同一层中一起使用两个指令，会出现一些不必要的性能问题，比如这个列表有一百条数据，再某种情况下，它们都不需要显示，当vue还是会循环这个100条数据显示，再去判断<code>v-if</code>，因此，我们应该避免这种情况的出现。<br>​ <font color="red">推荐方式：</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;item.value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ <font color="red">补充：</font> 根据官网说明，可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法</p><hr><h3 id="6-sync修饰符"><a href="#6-sync修饰符" class="headerlink" title="6. .sync修饰符"></a>6. <code>.sync</code>修饰符</h3><p>​ <font color="red">说明：</font>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以变更父组件，且在父组件和子组件两侧都没有明显的变更来源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html">// 父组件<br> <br> template&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Toggle</span> <span class="hljs-attr">:show.sync</span> = <span class="hljs-string">&#x27;show&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Toggle</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>//Toggle 组件<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span><br>    展示和隐藏组件<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>隐藏组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;show&#x27;</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;update:show&#x27;</span>,<span class="hljs-literal">false</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ <font color="red">补充：</font>注意带有 <code>.sync</code> 修饰符的 <code>v-bind</code> <strong>不能</strong>和表达式一起使用 (例如 <code>v-bind:title.sync=”doc.title + ‘!’”</code> 是无效的)。取而代之的是，你只能提供你想要绑定的 property 名，类似 <code>v-model</code>。</p><hr><h3 id="7-v-model-的修饰符"><a href="#7-v-model-的修饰符" class="headerlink" title="7. v-model 的修饰符"></a>7. <code>v-model</code> 的修饰符</h3><p>lazy：可以将@input事件变成@blur事件<br>number：只能输入数字值<br>trim：清空两边的空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">//lazy<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br>//number<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br>//trim<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="8-scrollBehavior-钩子，滚动页面"><a href="#8-scrollBehavior-钩子，滚动页面" class="headerlink" title="8. scrollBehavior 钩子，滚动页面"></a>8. <code>scrollBehavior</code> 钩子，滚动页面</h3><p>​ <font color="red">说明：</font>有些时候我们在操作一下页面的滚动行为，那么我们第一时间就会想到 <code>scrollTop</code>。其实我们还有第二个选择就是 <code>VueRouter</code> 给我们提供的 <code>scrollBehavior</code> 钩子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>:[...] ,<br>  <span class="hljs-title function_">scrollBehavior</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,position</span>)&#123;<br>      <span class="hljs-comment">// position参数，点击浏览器左右箭头会触发</span><br>      <span class="hljs-keyword">return</span>&#123;<br>          <span class="hljs-comment">// 这里可以返回很多参数，下面简单列就几个</span><br>          <span class="hljs-attr">x</span>:<span class="hljs-number">100</span>,<br>          <span class="hljs-attr">y</span>:<span class="hljs-number">100</span>,<br>          <span class="hljs-attr">selector</span>:#app,<br>          <span class="hljs-attr">offset</span>:<span class="hljs-number">200</span>,<br>          <span class="hljs-comment">//等等</span><br>      &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><hr><h3 id="9-子组件上定义的原生事件"><a href="#9-子组件上定义的原生事件" class="headerlink" title="9.  子组件上定义的原生事件"></a>9.  子组件上定义的原生事件</h3><p>​ <font color="red">说明：</font>有时候我们想在子组件上面监听一些事件，比如click，但是不论你怎么点，它都没反应，为什么呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;&#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 因为这样写<code>vue</code>会认为，你自定义了一个<code>click</code>事件，要在子组件通过<code>$emit(&#39;click&#39;)</code>触发才行。如果我就是要在父组件触发呢？那就要用到<code>native</code>修饰符了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;&#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="10-Vue-性能优化方式及原理"><a href="#10-Vue-性能优化方式及原理" class="headerlink" title="10. Vue 性能优化方式及原理"></a>10. Vue 性能优化方式及原理</h3><h4 id="1-使用v-slot-slotName，而不是slot-quot-slotName-quot"><a href="#1-使用v-slot-slotName，而不是slot-quot-slotName-quot" class="headerlink" title="1.  使用v-slot:slotName，而不是slot=&quot;slotName&quot;"></a>1.  使用<code>v-slot:slotName</code>，而不是<code>slot=&quot;slotName&quot;</code></h4><p>​ <code>v-slot</code>是 2.6 新增的语法，具体可查看:Vue2.6，2.6 发布已经是快两年前的事情了，但是现在仍然有不少人仍然在使用<code>slot=&quot;slotName&quot;</code>这个语法。虽然这两个语法都能达到相同的效果，但是内部的逻辑确实不一样的，<strong>旧的写法是将插槽内容作为 children 渲染的，会在父组件的渲染函数中创建，插槽内容的依赖会被父组件收集（name 的 dep 收集到父组件的渲染 watcher），而新的写法将插槽内容放在了 scopedSlots 中，会在子组件的渲染函数中调用，插槽内容的依赖会被子组件收集（name 的 dep 收集到子组件的渲染 watcher）</strong>，最终导致的结果就是：当我们修改 name 这个属性时，旧的写法是调用父组件的更新（调用父组件的渲染 watcher），然后在父组件更新过程中调用子组件更新（prePatch &#x3D;&gt; updateChildComponent），而新的写法则是直接调用子组件的更新（调用子组件的渲染 watcher）。</p><hr><h4 id="2-使用计算属性"><a href="#2-使用计算属性" class="headerlink" title="2. 使用计算属性"></a>2. 使用计算属性</h4><p>​ 计算属性最大的一个特点就是它是可以被缓存的，这个缓存指的是只要它的依赖的不发生改变，它就不会被重新求值，再次访问时会直接拿到缓存的值，在做一些复杂的计算时，可以极大提升性能。可以看以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;superCount&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">superCount</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> superCount = <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 假设这里有个复杂的计算</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;</span><br><span class="language-javascript">          superCount++</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> superCount</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 这个例子中，在 created、mounted 以及模板中都访问了 superCount 属性，这三次访问中，实际上只有第一次即<code>created</code>时才会对 superCount 求值，由于 count 属性并未改变，其余两次都是直接返回缓存的 value。</p><hr><h4 id="3-使用函数式组件"><a href="#3-使用函数式组件" class="headerlink" title="3. 使用函数式组件"></a>3. 使用函数式组件</h4><p>​ 对于某些组件，如果我们只是用来显示一些数据，不需要管理状态，监听数据等，那么就可以用函数式组件。函数式组件是无状态的，无实例的，在初始化时不需要初始化状态，不需要创建实例，也不需要去处理生命周期等，相比有状态组件，会更加轻量，同时性能也更好。</p><hr><h4 id="4-结合场景使用-v-show-和-v-if"><a href="#4-结合场景使用-v-show-和-v-if" class="headerlink" title="4. 结合场景使用 v-show 和 v-if"></a>4. 结合场景使用 v-show 和 v-if</h4><p>​ <code>v-if</code> 的部分被转换成了一个三元表达式，visible 为 true 时，创建一个 <code>UserProfile</code> 的 <code>vnode</code>，否则创建一个空 <code>vnode</code>，在 <code>patch</code> 的时候，新旧节点不一样，就会移除旧的节点或创建新的节点，这样的话<code>UserProfile</code>也会跟着创建 &#x2F; 销毁。如果<code>UserProfile</code>组件里有很多 DOM，或者要执行很多初始化 &#x2F; 销毁逻辑，那么随着 visible 的切换，势必会浪费掉很多性能。<br>​ 和 v-if 相比，v-show不需要在 <code>patch</code> 阶段创建 &#x2F; 移除节点，只是根据<code>v-show</code>上绑定的值来控制 DOM 元素的<code>style.display</code>属性，在频繁切换的场景下就可以节省很多性能。<br>​ <code>v-if</code>的优势体现在初始化时，<code>v-show</code>体现在更新时，当然并不是要求你绝对按照这个方式来，比如某些组件初始化时会请求数据，而你想先隐藏组件，然后在显示时能立刻看到数据，这时候就可以用<code>v-show</code>，又或者你想每次显示这个组件时都是最新的数据，那么你就可以用<code>v-if</code>，所以我们要结合具体业务场景去选一个合适的方式。</p><hr><h4 id="5-使用-keep-alive"><a href="#5-使用-keep-alive" class="headerlink" title="5.使用 keep-alive"></a>5.使用 keep-alive</h4><p>​ <code>keep-alive</code>的作用就是将它包裹的组件在第一次渲染后就缓存起来，下次需要时就直接从缓存里面取，避免了不必要的性能浪费，在讨论上个问题时，说的是<code>v-show</code>初始时性能压力大，因为它要创建所有的组件，其实可以用<code>keep-alive</code>优化下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">UserProfileA</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;visible&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">UserProfileB</span> <span class="hljs-attr">v-else</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 这样的话，初始化时不会渲染<code>UserProfileB</code>组件，当切换<code>visible</code>时，才会渲染<code>UserProfileB</code>组件，同时被<code>keep-alive</code>缓存下来，频繁切换时，由于是直接从缓存中取，所以会节省很多性能，所以这种方式在初始化和更新时都有较好的性能。<br>​ 但是<code>keep-alive</code>并不是没有缺点，组件被缓存时会占用内存，属于空间和时间上的取舍，在实际开发中要根据场景选择合适的方式。</p><hr><h4 id="6-始终为-v-for-添加-key，并且不要将-index-作为的-key"><a href="#6-始终为-v-for-添加-key，并且不要将-index-作为的-key" class="headerlink" title="6. 始终为 v-for 添加 key，并且不要将 index 作为的 key"></a>6. 始终为 v-for 添加 key，并且不要将 index 作为的 key</h4><p>​ 这一点是 Vue 风格指南中明确指出的一点，很多人都习惯的将 index 作为 key，这样其实是不太好的，index 作为 key 时，将会让 <font color="red">diff 算法产生错误的判断</font>，从而带来一些性能问题，你可以看下 ssh 大佬的文章，深入分析下，为什么 Vue 中不要用 index 作为 key。在这里我也通过一个例子来简单说明下当 index 作为 key 时是如何影响性能的。</p><hr><h4 id="7-延迟渲染"><a href="#7-延迟渲染" class="headerlink" title="7. 延迟渲染"></a>7. 延迟渲染</h4><p>​ 延迟渲染就是分批渲染，假设我们某个页面里有一些组件在初始化时需要执行复杂的逻辑：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Heavy组件初始化时需要执行很复杂的逻辑，执行大量计算 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Heavy1</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Heavy2</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Heavy3</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Heavy4</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 这将会占用很长时间，导致帧数下降、卡顿，其实可以使用分批渲染的方式来进行优化，就是先渲染一部分，再渲染另一部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Heavy</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;defer(1)&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Heavy</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;defer(2)&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Heavy</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;defer(3)&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Heavy</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;defer(4)&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">displayPriority</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">runDisplayPriority</span>()</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">runDisplayPriority</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> <span class="hljs-title function_">step</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">displayPriority</span>++</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">displayPriority</span> &lt; <span class="hljs-number">10</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">step</span>()</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-title function_">step</span>()</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">defer</span>(<span class="hljs-params">priority</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">displayPriority</span> &gt;= priority</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 其实原理很简单，主要是维护<code>displayPriority</code>变量，通过<code>requestAnimationFrame</code>在每一帧渲染时自增，然后我们就可以在组件上通过<code>v-if=&quot;defer(n)&quot;</code>使<code>displayPriority</code>增加到某一值时再渲染，这样就可以避免 js 执行时间过长导致的卡顿问题了。</p><hr><h4 id="8-使用非响应式数据"><a href="#8-使用非响应式数据" class="headerlink" title="8. 使用非响应式数据"></a>8. 使用非响应式数据</h4><p>​ 见 2. <font color="red">Object.freeze</font>方法</p><hr><h4 id="9-BASE64图片展示（后端给BASE64数据，前端展示图片）"><a href="#9-BASE64图片展示（后端给BASE64数据，前端展示图片）" class="headerlink" title="9. BASE64图片展示（后端给BASE64数据，前端展示图片）"></a>9. BASE64图片展示（后端给BASE64数据，前端展示图片）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgData&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><br>let imgData = &#x27;data:image/png;base64,&#x27; + res.data.imgrq // 后端返回的数据<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用nvm管理 node 版本</title>
    <link href="/2022/09/18/node/nvm/"/>
    <url>/2022/09/18/node/nvm/</url>
    
    <content type="html"><![CDATA[<blockquote><p>详细见 <a href="https://blog.csdn.net/qq_30376375/article/details/115877446">nvm介绍、nvm下载安装及使用</a></p></blockquote><h2 id="1-nvm介绍"><a href="#1-nvm介绍" class="headerlink" title="1. nvm介绍"></a>1. nvm介绍</h2><p style="text-indent: 2em">在工作中，我们可能同时在进行2个或者多个不同的项目开发，每个项目的需求不同，进而不同项目必须依赖不同版本的NodeJS运行环境，这种情况下，对于维护多个版本的node将会是一件非常麻烦的事情，nvm就是为解决这个问题而产生的，他可以方便的在同一台设备上进行多个node版本之间切换。</p><h2 id="2-nvm下载安装及使用"><a href="#2-nvm下载安装及使用" class="headerlink" title="2. nvm下载安装及使用"></a>2. nvm下载安装及使用</h2><h3 id="2-1-nvm下载"><a href="#2-1-nvm下载" class="headerlink" title="2.1 nvm下载"></a>2.1 nvm下载</h3><p>安装包下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>windows系统下载nvm-setup.zip安装包<br><img src="/img/node/node1.png"></p><h3 id="2-2-nvm安装"><a href="#2-2-nvm安装" class="headerlink" title="2.2 nvm安装"></a>2.2 nvm安装</h3><p>如果电脑上之前已经单独安装了node，先卸载<font color="red">(有的电脑不需要卸载也能安装成功，而且安装后能自动识别电脑上已经安装的node 版本)</font>，然后解压nvm-setup.zip安装包，进入解压的文件夹，双击exe后缀文件进行安装。<br><img src="/img/node/node2.png"></p><p>下面这个界面是选择安装nvm的路径，自己可以更改安装路径，一般默认路径。<font color='red'>(<strong>注意：安装路径不要有中文或者空格</strong>)</font><br><img src="/img/node/node3.png"></p><p>下面这个是nodejs的安装位置，如果没有nodejs文件夹就新建一个(后来发现他会自动生成一个快捷方式)。<br><img src="/img/node/node4.png"></p><p>安装完毕后输入 nvm -v 查看版本。<br><img src="/img/node/node5.png"></p><p><font color='red'>下面设置setting.txt，可忽略不设置</font></p><p>安装完毕后，找到安装的路径，一些简单配置，打开setting.txt<br><img src="/img/node/node6.png"></p><p>在后面添加这两行代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">node_mirror: https://npm.taobao.org/mirrors/node/<br>npm_mirror: https://npm.taobao.org/mirrors/npm/<br></code></pre></td></tr></table></figure><h3 id="2-3-nvm的使用"><a href="#2-3-nvm的使用" class="headerlink" title="2.3 nvm的使用"></a>2.3 nvm的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm off                     <span class="hljs-comment"># 禁用node.js版本管理(不卸载任何东西)</span><br>nvm on                      <span class="hljs-comment"># 启用node.js版本管理</span><br>nvm install &lt;version&gt;       <span class="hljs-comment"># 安装node.js的命名 version是版本号 例如：nvm install 8.12.0</span><br>nvm uninstall &lt;version&gt;     <span class="hljs-comment"># 卸载node.js是的命令，卸载指定版本的nodejs，当安装失败时卸载使用</span><br>nvm <span class="hljs-built_in">ls</span>                      <span class="hljs-comment"># 显示所有安装的node.js版本</span><br>nvm list available          <span class="hljs-comment"># 显示可以安装的所有node.js的版本</span><br>nvm use &lt;version&gt;           <span class="hljs-comment"># 切换到使用指定的nodejs版本</span><br>nvm v                       <span class="hljs-comment"># 显示nvm版本</span><br>nvm install stable          <span class="hljs-comment"># 安装最新稳定版</span><br></code></pre></td></tr></table></figure><p>如果使用<code>node -v</code>，提示<code>node:command not found</code>,则需要nvm use node版本号，见下图</p><p><img src="/img/node/node7.png" alt="nvm use"></p><div class="note note-success">            <p>2022-11-10 补充：使用 <code>nvm use</code> 切换 node 版本时出现乱码</p>          </div><h3 id="2-4-nvm-use-出现乱码"><a href="#2-4-nvm-use-出现乱码" class="headerlink" title="2.4 nvm use 出现乱码"></a>2.4 nvm use 出现乱码</h3><p>如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\10303&gt;nvm use 14.18.2<br><span class="hljs-built_in">exit</span> status 1: ��û���㹻��Ȩ��ִ�д˲�����<br></code></pre></td></tr></table></figure><p><strong>解决方法</strong>：以管理员身份运行 <code>cmd.exe</code></p>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
      <tag>nvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ant Design Pro V4.5.0 基本设置</title>
    <link href="/2022/09/18/umi-antd-pro/base-setting/"/>
    <url>/2022/09/18/umi-antd-pro/base-setting/</url>
    
    <content type="html"><![CDATA[<h3 id="添加非菜单页面"><a href="#添加非菜单页面" class="headerlink" title="添加非菜单页面"></a>添加非菜单页面</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// config/routes.ts</span><br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/list/detail&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;smile&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./List/Detail&#x27;</span>,<br>  <span class="hljs-attr">menu</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 将 menu 设为 false</span><br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="更换菜单上显示的-Icon"><a href="#更换菜单上显示的-Icon" class="headerlink" title="更换菜单上显示的 Icon"></a>更换菜单上显示的 Icon</h3><p><img src="/img/antd/antd1.png"></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// config/config.ts 文件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  ...<br>  <span class="hljs-attr">define</span>: &#123;<br>    <span class="hljs-string">&#x27;process.env&#x27;</span>: &#123;<br>      <span class="hljs-attr">API_ENV</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">API_ENV</span><br>    &#125;<br>  &#125;,<br>  ...<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/utils/common.ts 文件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> apiPre = &#123;<br>  <span class="hljs-attr">dev</span>: <span class="hljs-string">&#x27;http://10.10.120.32:8020&#x27;</span>, <span class="hljs-comment">// 开发</span><br>  <span class="hljs-attr">devmap</span>: <span class="hljs-string">&#x27;http://140.143.94.182:12020&#x27;</span>, <span class="hljs-comment">// 测试地址外网映射</span><br>  <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;http://10.10.120.32:8020&#x27;</span>, <span class="hljs-comment">// 测试</span><br>  <span class="hljs-attr">prod</span>: <span class="hljs-string">&#x27;http://47.242.204.28:8020&#x27;</span>, <span class="hljs-comment">// 生产</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/utils/request.ts</span><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">import</span> &#123; apiPre &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./common&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">API_ENV</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">API_ENV</span> || <span class="hljs-string">&#x27;dev&#x27;</span>;<br><br><span class="hljs-keyword">const</span> request = <span class="hljs-title function_">extend</span>(&#123;<br>  errorHandler, <span class="hljs-comment">// 默认错误处理</span><br>  <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-comment">// 默认请求是否带上cookie</span><br>  <span class="hljs-attr">prefix</span>: apiPre[<span class="hljs-variable constant_">API_ENV</span>],<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.josn</span><br><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;build:test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env API_ENV=test umi build&quot;</span><span class="hljs-punctuation">,</span>    <br>  <span class="hljs-attr">&quot;build:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env API_ENV=prod umi build&quot;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-attr">&quot;start:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env API_ENV=dev REACT_APP_ENV=dev MOCK=none umi dev&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;start:devmap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env API_ENV=devmap REACT_APP_ENV=dev MOCK=none umi dev&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;start:test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env API_ENV=test REACT_APP_ENV=test MOCK=none umi dev&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;start:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env API_ENV=prod REACT_APP_ENV=pre umi dev&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Ant Design Pro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ant Design Pro</tag>
      
      <tag>Umi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git commit 报错</title>
    <link href="/2022/09/18/github/git-commit-error/"/>
    <url>/2022/09/18/github/git-commit-error/</url>
    
    <content type="html"><![CDATA[<p>git commit 的时候报错： Git: husky &gt; pre-commit<br><img src="/img/github/github3.png"></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>项目中使用了husky, 这个会在你git commit 的时候先执行里面的严谨模式, 对代码进行检查, 有error就会终止提交</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p>是在项目的 .git 文件夹下<font color='red'>（需要显示隐藏文件才能找到.git文件夹）</font>找到hooks文件夹，把里面的 pre-commit 文件删掉。</p></li><li><p>还有一种方法是git提交的时候加一个  –no-verify , 就可以绕过了 eslint 的检查了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m 说明 --no-verify<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>GitHub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置 SSH</title>
    <link href="/2022/09/18/github/set-ssh/"/>
    <url>/2022/09/18/github/set-ssh/</url>
    
    <content type="html"><![CDATA[<ol><li>首先打开Git Bash设置名字和邮箱：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span><br><br>git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>删除.SSH文件下的known_hosts(.SSH在C:\Users\Windows用户名目录下)<font color="red">如果有的话</font></p></li><li><p>生成ssh公钥认证所需的公钥和私钥文件</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>第一次的话是下面这种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\10303&gt;ssh-keygen -t rsa -C (邮箱)<br>Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (C:\Users\10303/.ssh/id_rsa): (回车)<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase): (回车)<br>Enter same passphrase again: (回车)<br>Your identification has been saved <span class="hljs-keyword">in</span> C:\Users\10303/.ssh/id_rsa.<br>Your public key has been saved <span class="hljs-keyword">in</span> C:\Users\10303/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:N4pzoV1quv/MAAzFltqQNxt9rXOg+po+gEJjKAp3P2E (展示你的邮箱)<br>The key<span class="hljs-string">&#x27;s randomart image is:</span><br><span class="hljs-string">+---[RSA 3072]----+</span><br><span class="hljs-string">|     o.o   .     |</span><br><span class="hljs-string">|    o.B . o .    |</span><br><span class="hljs-string">|.   .* + o o     |</span><br><span class="hljs-string">|++. ooE . o .    |</span><br><span class="hljs-string">|*..o oooS +o     |</span><br><span class="hljs-string">|o . . += * .     |</span><br><span class="hljs-string">| .   .+oB        |</span><br><span class="hljs-string">|      .*.+       |</span><br><span class="hljs-string">|     .*=..+      |</span><br><span class="hljs-string">+----[SHA256]-----+</span><br></code></pre></td></tr></table></figure><p>不是第一次的话就是以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\10303&gt;ssh-keygen -t rsa -C (邮箱)<br>Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/c/Users/Administrator/.ssh/id_rsa):<br>/c/Users/Administrator/.ssh/id_rsa already exists.<br>Overwrite (y/n)? y（输入y）<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):（回车）<br><br>Enter same passphrase again:（回车）<br></code></pre></td></tr></table></figure><p>然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub，将里面的内容复制到下面这里:<br><img src="/img/github/github1.png"></p><ol start="4"><li>查看主机是否与 github 网站之间的 ssh 通信是否连接成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure>如果没有报错，就按照提示输入 <font color='red'>yes</font>，在按回车，不要习惯性的直接回车，会报错。<br><img src="/img/github/github2.png"></li></ol><p>出现上图中的结果则说明连接成功，可以拉取、上传代码了。</p><p>如果出现如下图的报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br>kex_exchange_identification: Connection closed by remote host<br></code></pre></td></tr></table></figure><p>可能是以下原因：</p><ul><li>本地启用了代理；<font color='red'>(我就是这种情况)</font><ul><li>将代理关掉；</li><li>在代理规则里过滤掉服务器的ip；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>GitHub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jeecg-boot单个页面免登录</title>
    <link href="/2022/09/18/jeecgboot/no-auth-page/"/>
    <url>/2022/09/18/jeecgboot/no-auth-page/</url>
    
    <content type="html"><![CDATA[<p>用于不需要登陆就能访问的页面。</p><ol><li><p>配置路由 （router.config.js）<br><img src="/img/jeecgboot/jeecgboot1.png"></p></li><li><p>在permission.js里，把刚才的路由添加到白名单<br><img src="/img/jeecgboot/jeecgboot1.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Jeecg Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jeecg Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown 常用语法</title>
    <link href="/2022/09/17/markdown/base/"/>
    <url>/2022/09/17/markdown/base/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-常用语法"><a href="#Markdown-常用语法" class="headerlink" title="Markdown 常用语法"></a>Markdown 常用语法</h1><h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 这是一级标题</span><br><span class="hljs-section">## 这是二级标题</span><br><span class="hljs-section">### 这是三级标题</span><br><span class="hljs-section">#### 这是四级标题</span><br><span class="hljs-section">##### 这是五级标题</span><br><span class="hljs-section">###### 这是六级标题</span><br></code></pre></td></tr></table></figure><hr><h2 id="2、字体"><a href="#2、字体" class="headerlink" title="2、字体"></a>2、字体</h2><p><strong>这是加粗的文字</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br></code></pre></td></tr></table></figure><p><em>这是倾斜的文字</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*这是倾斜的文字*</span><br></code></pre></td></tr></table></figure><p><em><strong>这是斜体加粗的文字</strong></em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*这是斜体加粗的文字*</span>**</span><br></code></pre></td></tr></table></figure><p><del>这是加删除线的文字</del></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">~~这是加删除线的文字~~<br></code></pre></td></tr></table></figure><p><u>带下划线文本</u></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>带下划线文本<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><font color="red">带颜色的字体</font></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span></span>带颜色的字体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="3、引用"><a href="#3、引用" class="headerlink" title="3、引用"></a>3、引用</h2><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&gt;这是引用的内容<br>&gt;&gt;这是引用的内容<br>&gt;&gt;&gt;这是引用的内容<br></code></pre></td></tr></table></figure><hr><h2 id="4、分割线"><a href="#4、分割线" class="headerlink" title="4、分割线"></a>4、分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。</p><hr><h2 id="5、图片"><a href="#5、图片" class="headerlink" title="5、图片"></a>5、图片</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片alt</span>](<span class="hljs-link">图片地址 &#x27;&#x27;图片title&#x27;&#x27;</span>)<br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br></code></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="https://gameplus-platform.cdn.bcebos.com/gameplus-platform/upload/file/source/bbf45d6915d7e84f4905bcf4cf4e4b63.jpg" alt="仙剑七" title="仙剑七"></p><hr><h2 id="6、超链接"><a href="#6、超链接" class="headerlink" title="6、超链接"></a>6、超链接</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">超链接名</span>](<span class="hljs-link">超链接地址 &quot;超链接title&quot;</span>)<br>title可加可不加<br></code></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><a href="http://jianshu.com/">简书</a><br><a href="http://baidu.com/">百度</a></p><hr><h2 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">无序列表用 - + <span class="hljs-emphasis">* 任何一种都可以</span><br><span class="hljs-emphasis">注意：- + *</span> 跟内容之间都要有一个空格<br></code></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">数字加点<br>注意：序号跟内容之间要有空格<br></code></pre></td></tr></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><ol><li>第一</li><li>第二</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">上一级和下一级之间敲三个空格即可<br></code></pre></td></tr></table></figure><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><ol><li>第一章<ul><li>第一节</li></ul></li><li>第二章<ul><li>第一节</li><li>第二节</li></ul></li></ol><hr><h2 id="8、表格"><a href="#8、表格" class="headerlink" title="8、表格"></a>8、表格</h2><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">表头|表头|表头<br>---|:--:|---:<br>内容|内容|内容<br>内容|内容|内容<br>第二行分割表头和内容。<br><span class="hljs-bullet">-</span> 有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略<br></code></pre></td></tr></table></figure><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><hr><h2 id="9、代码"><a href="#9、代码" class="headerlink" title="9、代码"></a>9、代码</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><p>单行代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">代码之间分别用一个反引号包起来<br><span class="hljs-code">`var a = 1;`</span><br></code></pre></td></tr></table></figure><p>代码块：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br></code></pre></td></tr></table></figure><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;)();<br></code></pre></td></tr></table></figure><h3 id="支持以下语言种类"><a href="#支持以下语言种类" class="headerlink" title="支持以下语言种类"></a>支持以下语言种类</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim">bash<br>clojure，cpp，<span class="hljs-keyword">cs</span>，css<br>dart，dockerfile, diff<br>erlang<br><span class="hljs-keyword">go</span>，gradle，groovy<br>haskell<br>java，javascript，json，julia<br>kotlin<br>lisp，<span class="hljs-keyword">lua</span><br>makefile，markdown，matlab<br>objectivec<br><span class="hljs-keyword">perl</span>，php，<span class="hljs-keyword">python</span><br>r，<span class="hljs-keyword">ruby</span>，rust<br>scala，<span class="hljs-keyword">shell</span>，sql，swift<br>tex，typescript<br>verilog，vhdl<br>xml<br>yaml<br></code></pre></td></tr></table></figure><hr><h2 id="10、支持HTML元素"><a href="#10、支持HTML元素" class="headerlink" title="10、支持HTML元素"></a>10、支持HTML元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。常用的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt; &lt;p&gt;</code>等 ，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">使用 <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Ctrl<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span>+<span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Alt<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span>+<span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Del<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> 重启电脑<br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>字体加粗<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h2 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a><b>字体加粗</b></h2><h2 id="11、转义"><a href="#11、转义" class="headerlink" title="11、转义"></a>11、转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><h2 id="12、段落文字首行缩进两个字符"><a href="#12、段落文字首行缩进两个字符" class="headerlink" title="12、段落文字首行缩进两个字符"></a>12、段落文字首行缩进两个字符</h2><h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3><p>半方大的空白 <code>&amp;ensp;</code> 或 <code>&amp;#8194;</code>;</p><p>全方大的空白 <code>&amp;emsp;</code> 或 <code>&amp;#8195;</code>;</p><p>不断行的空白格 <code>&amp;nbsp;</code> 或 <code>&amp;#160;</code>;</p><h3 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h3><p>markdown语法支持html语法所以可以用这个。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-indent:2em&quot;</span>&gt;</span>xxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p style="text-indent:2em">这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字这是一段很长很长的文字。</p><h2 id="13、锚点"><a href="#13、锚点" class="headerlink" title="13、锚点"></a>13、锚点</h2><p><code>Markdown</code> 的语法是不支持锚点的，可以使用 <code>HTML</code> 的锚点语法，在页面中点击一个链接跳转到页面中锚点所在的位置。</p><p>建立一个跳转的链连接，这个语法和普通链接的语法一样，区别就是括号内的链接以<font color="red"> <strong>#</strong> </font>起始。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">说明1</span>](<span class="hljs-link">#target1</span>)<br>[<span class="hljs-string">说明2</span>](<span class="hljs-link">#target2</span>)<br></code></pre></td></tr></table></figure><p>在需要跳转到的位置增加如下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;target1&quot;</span>&gt;</span>目标1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>或者<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;target2&quot;</span>&gt;</span>目标2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 的下载、更换主题、部署静态网站</title>
    <link href="/2022/09/17/hexo/hexo-github/"/>
    <url>/2022/09/17/hexo/hexo-github/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-Hexo-？"><a href="#什么是-Hexo-？" class="headerlink" title="什么是 Hexo ？"></a>什么是 <code>Hexo</code> ？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li>Git</li></ul><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 <code>Hexo</code></h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br>hexo server<br></code></pre></td></tr></table></figure><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><code>Hexo</code> 的默认主题不好看，可以在 <code>Hexo</code> 的主题商城中挑选喜欢的主题替换，以 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 主题为例：</p><ol><li>下载 zip 文件，解压后可以重新给文件命名，取个简单的名字：fluid;</li></ol><p><img src="/img/hexo/hexo1.png"></p><ol start="2"><li>将 fluid 文件放在 &#x2F;themes 目录下；</li></ol><p><img src="/img/hexo/hexo2.png"></p><ol start="3"><li>修改 &#x2F;_config.yml 文件的配置；</li></ol><p><img src="/img/hexo/hexo3.png"></p><ol start="4"><li>运行 <code>hexo server</code> 命令查看效果；</li></ol><h2 id="部署静态网站"><a href="#部署静态网站" class="headerlink" title="部署静态网站"></a>部署静态网站</h2><h3 id="部署到-GitHub-pages"><a href="#部署到-GitHub-pages" class="headerlink" title="部署到 GitHub pages"></a>部署到 <code>GitHub pages</code></h3><ul><li>新建代码库</li></ul><p><img src="/img/hexo/hexo4.png"></p><p>另外再创建一个分支dev，后续的代码都在dev分支上修改，master分支用于部署 GitHub pages 的静态页面。</p><ul><li>配置 <code>GitHub</code> 账户信息</li></ul><p>打开Git Bash 输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的用户名&quot;</span>  <br>git config --global user.email  <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><ul><li>配置 <code>SSH</code> 密钥</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>一直回车就行，-C的是大写的C，在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容（其实没有必要设置密码）。</p><p><strong>注意：输入密码的时候没有输入痕迹的，不要以为什么也没有输入。</strong></p><ul><li><p>在 <code>GitHub</code> 账户中添加你的公钥</p></li><li><p>测试</p></li></ul><p>输入下面的命令（<font color="red">千万不要改动下面的命令，按照此模式直接输入就好了</font>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>直接在后面输入yes即可，最后会出现如下情况即说明设置正确</p><p><img src="/img/hexo/hexo5.png"></p><ul><li>将本地的 <code>Hexo</code> 文件更新到 <code>Github</code> 的库中</li></ul><p>克隆时选择 <code>SSH</code> 方式。克隆后切换到 <code>dev</code> 分支，将本地代码拷贝过去。</p><ul><li>配置Deployment</li></ul><p>同样在 <code>_config.yml</code> 文件中，找到 <code>Deployment</code> ，然后按照如下修改：（这里的分支写master）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">_config.yml</span><br><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:yourname/yourname.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><ul><li>安装deploy-git</li></ul><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后部署，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><ul><li>写博客，发布文章</li></ul><p>新建一篇博客，执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post <span class="hljs-string">&quot;article title&quot;</span><br></code></pre></td></tr></table></figure><p>此时在 <code>source\ _posts</code> 目录下将会看到 <code>article title.md</code> 文件。</p><p>用 <code>MarkDown</code> 编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g   // 生成<br>hexo d   // 部署<br></code></pre></td></tr></table></figure><p>当然你也可以执行下面的命令，相当于上面两条命令的效果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d -g <span class="hljs-comment">#在部署前先生成</span><br></code></pre></td></tr></table></figure><p>如果没更新，可以用 <code>hexo clean</code> 来先清除之前的再生成。</p><ul><li>访问博客</li></ul><p>博客地址：https :&#x2F;&#x2F;你的用户名.github.io</p><h3 id="部署到-Gitee-pages"><a href="#部署到-Gitee-pages" class="headerlink" title="部署到 Gitee pages"></a>部署到 <code>Gitee pages</code></h3><ul><li><p>可以参考官网的说明，写的还是很详细的，毕竟都是中文，容易理解 <a href="https://gitee.com/help/articles/4136">Gitee pages</a></p></li><li><p>配置 <code>Gitee SSH</code> 公钥</p></li></ul><p><img src="/img/github/github4.png" alt="SSH公钥"></p><ul><li>修改 <code>yaml</code></li></ul><p>在 <code>_config.yml</code> 文件中，找到 <code>Deployment</code> ，然后按照如下修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: <br>    github: git@github.com:yourname/yourname.github.io.git<br>    gitee: git@gitee.com:个性地址名/仓库名.git <span class="hljs-comment"># 个性地址名 和 仓库名 是一样的</span><br>  branch: master<br></code></pre></td></tr></table></figure><ul><li>访问博客</li></ul><p>博客地址：https :&#x2F;&#x2F;仓库名.gitee.io</p><blockquote><p>文档参考：<a href="https://blog.csdn.net/guoxiaorui666/article/details/99623023?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166343517216800182767025%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=166343517216800182767025&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-99623023-null-null.nonecase&utm_term=%E4%BD%BF%E7%94%A8GitHub%20Pages+Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4450">使用GitHub Pages+Hexo 搭建个人网站详细教程</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
